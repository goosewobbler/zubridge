/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const { existsSync, readFileSync } = require('fs')
const { join } = require('path');

const { platform, arch } = process;

let nativeBinding = null;
let localFileExisted = false;
let loadError = null;

function isMusl() {
  // For Node 10
  if (!process.report || typeof process.report.getReport !== 'function') {
    try {
      const lddPath = require('child_process').execSync('which ldd').toString().trim();
      return readFileSync(lddPath, 'utf8').includes('musl');
    } catch (e) {
      return true;
    }
  } else {
    const { glibcVersionRuntime } = process.report.getReport().header;
    return !glibcVersionRuntime;
  }
}

switch (platform) {
  case 'android':
    switch (arch) {
      case 'arm64':
        localFileExisted = existsSync(join(__dirname, 'zubridge-middleware.android-arm64.node'));
        try {
          if (localFileExisted) {
            nativeBinding = require('./zubridge-middleware.android-arm64.node');
          } else {
            nativeBinding = require('@zubridge/middleware-android-arm64');
          }
        } catch (e) {
          loadError = e;
        }
        break;
      case 'arm':
        localFileExisted = existsSync(join(__dirname, 'zubridge-middleware.android-arm-eabi.node'));
        try {
          if (localFileExisted) {
            nativeBinding = require('./zubridge-middleware.android-arm-eabi.node');
          } else {
            nativeBinding = require('@zubridge/middleware-android-arm-eabi');
          }
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Android ${arch}`);
    }
    break;
  case 'win32':
    console.log(`[Middleware Loader] Windows: arch=${arch}, __dirname=${__dirname}`);
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(join(__dirname, 'zubridge-middleware.win32-x64-msvc.node'));
        try {
          if (localFileExisted) {
            console.log(
              "[Middleware Loader] Windows X64: Attempting local require: './zubridge-middleware.win32-x64-msvc.node'",
            );
            nativeBinding = require('./zubridge-middleware.win32-x64-msvc.node');
          } else {
            console.log(
              "[Middleware Loader] Windows X64: Attempting package require: '@zubridge/middleware-win32-x64-msvc'",
            );
            nativeBinding = require('@zubridge/middleware-win32-x64-msvc');
          }
        } catch (e) {
          console.error('[Middleware Loader] Windows X64: Error loading binding:', e);
          loadError = e;
        }
        break;
      case 'ia32':
        localFileExisted = existsSync(join(__dirname, 'zubridge-middleware.win32-ia32-msvc.node'));
        try {
          if (localFileExisted) {
            console.log(
              "[Middleware Loader] Windows IA32: Attempting local require: './zubridge-middleware.win32-ia32-msvc.node'",
            );
            nativeBinding = require('./zubridge-middleware.win32-ia32-msvc.node');
          } else {
            console.log(
              "[Middleware Loader] Windows IA32: Attempting package require: '@zubridge/middleware-win32-ia32-msvc'",
            );
            nativeBinding = require('@zubridge/middleware-win32-ia32-msvc');
          }
        } catch (e) {
          console.error('[Middleware Loader] Windows IA32: Error loading binding:', e);
          loadError = e;
        }
        break;
      case 'arm64':
        localFileExisted = existsSync(join(__dirname, 'zubridge-middleware.win32-arm64-msvc.node'));
        try {
          if (localFileExisted) {
            console.log(
              "[Middleware Loader] Windows ARM64: Attempting local require: './zubridge-middleware.win32-arm64-msvc.node'",
            );
            nativeBinding = require('./zubridge-middleware.win32-arm64-msvc.node');
          } else {
            console.log(
              "[Middleware Loader] Windows ARM64: Attempting package require: '@zubridge/middleware-win32-arm64-msvc'",
            );
            nativeBinding = require('@zubridge/middleware-win32-arm64-msvc');
          }
        } catch (e) {
          console.error('[Middleware Loader] Windows ARM64: Error loading binding:', e);
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Windows: ${arch}`);
    }
    break;
  case 'darwin':
    console.log(`[Middleware Loader] Darwin: arch=${arch}, __dirname=${__dirname}`);
    localFileExisted = existsSync(join(__dirname, 'zubridge-middleware.darwin-universal.node'));
    try {
      if (localFileExisted) {
        console.log(
          "[Middleware Loader] Darwin Universal: Attempting local require: './zubridge-middleware.darwin-universal.node'",
        );
        nativeBinding = require('./zubridge-middleware.darwin-universal.node');
      } else {
        console.log(
          "[Middleware Loader] Darwin Universal: Attempting package require: '@zubridge/middleware-darwin-universal'",
        );
        nativeBinding = require('@zubridge/middleware-darwin-universal');
      }
      break;
    } catch {}
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(join(__dirname, 'zubridge-middleware.darwin-x64.node'));
        try {
          if (localFileExisted) {
            console.log(
              "[Middleware Loader] Darwin X64: Attempting local require: './zubridge-middleware.darwin-x64.node'",
            );
            nativeBinding = require('./zubridge-middleware.darwin-x64.node');
          } else {
            console.log(
              "[Middleware Loader] Darwin X64: Attempting package require: '@zubridge/middleware-darwin-x64'",
            );
            nativeBinding = require('@zubridge/middleware-darwin-x64');
          }
        } catch (e) {
          console.error('[Middleware Loader] Darwin X64: Error loading binding:', e);
          console.error('[Middleware Loader] Darwin Universal: Error loading binding:', e);
          loadError = e;
        }
        break;
      case 'arm64':
        localFileExisted = existsSync(join(__dirname, 'zubridge-middleware.darwin-arm64.node'));
        try {
          if (localFileExisted) {
            console.log(
              "[Middleware Loader] Darwin Arm64: Attempting local require: './zubridge-middleware.darwin-arm64.node'",
            );
            nativeBinding = require('./zubridge-middleware.darwin-arm64.node');
          } else {
            console.log(
              "[Middleware Loader] Darwin Arm64: Attempting package require: '@zubridge/middleware-darwin-arm64'",
            );
            nativeBinding = require('@zubridge/middleware-darwin-arm64');
          }
        } catch (e) {
          console.error('[Middleware Loader] Darwin Arm64: Error loading binding:', e);
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on macOS: ${arch}`);
    }
    break;
  case 'freebsd':
    if (arch !== 'x64') {
      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`);
    }
    localFileExisted = existsSync(join(__dirname, 'zubridge-middleware.freebsd-x64.node'));
    try {
      if (localFileExisted) {
        nativeBinding = require('./zubridge-middleware.freebsd-x64.node');
      } else {
        nativeBinding = require('@zubridge/middleware-freebsd-x64');
      }
    } catch (e) {
      loadError = e;
    }
    break;
  case 'linux':
    console.log(`[Middleware Loader] Linux: arch=${arch}, __dirname=${__dirname}`);
    switch (arch) {
      case 'x64':
        if (isMusl()) {
          localFileExisted = existsSync(join(__dirname, 'zubridge-middleware.linux-x64-musl.node'));
          try {
            if (localFileExisted) {
              console.log(
                "[Middleware Loader] Linux x64-musl: Attempting local require: './zubridge-middleware.linux-x64-musl.node'",
              );
              nativeBinding = require('./zubridge-middleware.linux-x64-musl.node');
            } else {
              console.log(
                "[Middleware Loader] Linux x64-musl: Attempting package require: '@zubridge/middleware-linux-x64-musl'",
              );
              nativeBinding = require('@zubridge/middleware-linux-x64-musl');
            }
          } catch (e) {
            console.error('[Middleware Loader] Linux x64-musl: Error loading binding:', e);
            loadError = e;
          }
        } else {
          localFileExisted = existsSync(join(__dirname, 'zubridge-middleware.linux-x64-gnu.node'));
          try {
            if (localFileExisted) {
              console.log(
                "[Middleware Loader] Linux x64-gnu: Attempting local require: './zubridge-middleware.linux-x64-gnu.node'",
              );
              nativeBinding = require('./zubridge-middleware.linux-x64-gnu.node');
            } else {
              console.log(
                "[Middleware Loader] Linux x64-gnu: Attempting package require: '@zubridge/middleware-linux-x64-gnu'",
              );
              nativeBinding = require('@zubridge/middleware-linux-x64-gnu');
            }
          } catch (e) {
            console.error('[Middleware Loader] Linux x64-gnu: Error loading binding:', e);
            loadError = e;
          }
        }
        break;
      case 'arm64':
        if (isMusl()) {
          localFileExisted = existsSync(join(__dirname, 'zubridge-middleware.linux-arm64-musl.node'));
          try {
            if (localFileExisted) {
              console.log(
                "[Middleware Loader] Linux arm64-musl: Attempting local require: './zubridge-middleware.linux-arm64-musl.node'",
              );
              nativeBinding = require('./zubridge-middleware.linux-arm64-musl.node');
            } else {
              console.log(
                "[Middleware Loader] Linux arm64-musl: Attempting package require: '@zubridge/middleware-linux-arm64-musl'",
              );
              nativeBinding = require('@zubridge/middleware-linux-arm64-musl');
            }
          } catch (e) {
            console.error('[Middleware Loader] Linux arm64-musl: Error loading binding:', e);
            loadError = e;
          }
        } else {
          localFileExisted = existsSync(join(__dirname, 'zubridge-middleware.linux-arm64-gnu.node'));
          try {
            if (localFileExisted) {
              console.log(
                "[Middleware Loader] Linux arm64-gnu: Attempting local require: './zubridge-middleware.linux-arm64-gnu.node'",
              );
              nativeBinding = require('./zubridge-middleware.linux-arm64-gnu.node');
            } else {
              console.log(
                "[Middleware Loader] Linux arm64-gnu: Attempting package require: '@zubridge/middleware-linux-arm64-gnu'",
              );
              nativeBinding = require('@zubridge/middleware-linux-arm64-gnu');
            }
          } catch (e) {
            console.error('[Middleware Loader] Linux arm64-gnu: Error loading binding:', e);
            loadError = e;
          }
        }
        break;
      case 'arm':
        if (isMusl()) {
          localFileExisted = existsSync(join(__dirname, 'zubridge-middleware.linux-arm-musleabihf.node'));
          try {
            if (localFileExisted) {
              nativeBinding = require('./zubridge-middleware.linux-arm-musleabihf.node');
            } else {
              nativeBinding = require('@zubridge/middleware-linux-arm-musleabihf');
            }
          } catch (e) {
            loadError = e;
          }
        } else {
          localFileExisted = existsSync(join(__dirname, 'zubridge-middleware.linux-arm-gnueabihf.node'));
          try {
            if (localFileExisted) {
              console.log(
                "[Middleware Loader] Linux arm-gnu: Attempting local require: './zubridge-middleware.linux-arm-gnueabihf.node'",
              );
              nativeBinding = require('./zubridge-middleware.linux-arm-gnueabihf.node');
            } else {
              console.log(
                "[Middleware Loader] Linux arm-gnu: Attempting package require: '@zubridge/middleware-linux-arm-gnueabihf'",
              );
              nativeBinding = require('@zubridge/middleware-linux-arm-gnueabihf');
            }
          } catch (e) {
            console.error('[Middleware Loader] Linux arm-gnu: Error loading binding:', e);
            loadError = e;
          }
        }
        break;
      case 'riscv64':
        if (isMusl()) {
          localFileExisted = existsSync(join(__dirname, 'zubridge-middleware.linux-riscv64-musl.node'));
          try {
            if (localFileExisted) {
              console.log(
                "[Middleware Loader] Linux riscv64-musl: Attempting local require: './zubridge-middleware.linux-riscv64-musl.node'",
              );
              nativeBinding = require('./zubridge-middleware.linux-riscv64-musl.node');
            } else {
              console.log(
                "[Middleware Loader] Linux riscv64-musl: Attempting package require: '@zubridge/middleware-linux-riscv64-musl'",
              );
              nativeBinding = require('@zubridge/middleware-linux-riscv64-musl');
            }
          } catch (e) {
            console.error('[Middleware Loader] Linux riscv64-musl: Error loading binding:', e);
            loadError = e;
          }
        } else {
          localFileExisted = existsSync(join(__dirname, 'zubridge-middleware.linux-riscv64-gnu.node'));
          try {
            if (localFileExisted) {
              console.log(
                "[Middleware Loader] Linux riscv64-gnu: Attempting local require: './zubridge-middleware.linux-riscv64-gnu.node'",
              );
              nativeBinding = require('./zubridge-middleware.linux-riscv64-gnu.node');
            } else {
              console.log(
                "[Middleware Loader] Linux riscv64-gnu: Attempting package require: '@zubridge/middleware-linux-riscv64-gnu'",
              );
              nativeBinding = require('@zubridge/middleware-linux-riscv64-gnu');
            }
          } catch (e) {
            console.error('[Middleware Loader] Linux riscv64-gnu: Error loading binding:', e);
            loadError = e;
          }
        }
        break;
      case 's390x':
        localFileExisted = existsSync(join(__dirname, 'zubridge-middleware.linux-s390x-gnu.node'));
        try {
          if (localFileExisted) {
            console.log(
              "[Middleware Loader] Linux s390x-gnu: Attempting local require: './zubridge-middleware.linux-s390x-gnu.node'",
            );
            nativeBinding = require('./zubridge-middleware.linux-s390x-gnu.node');
          } else {
            console.log(
              "[Middleware Loader] Linux s390x-gnu: Attempting package require: '@zubridge/middleware-linux-s390x-gnu'",
            );
            nativeBinding = require('@zubridge/middleware-linux-s390x-gnu');
          }
        } catch (e) {
          console.error('[Middleware Loader] Linux s390x-gnu: Error loading binding:', e);
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Linux: ${arch}`);
    }
    break;
  default:
    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`);
}

if (!nativeBinding) {
  if (loadError) {
    throw loadError;
  }
  throw new Error(`Failed to load native binding`);
}

const { ZubridgeMiddleware, initZubridgeMiddleware } = nativeBinding;

module.exports.ZubridgeMiddleware = ZubridgeMiddleware;
module.exports.initZubridgeMiddleware = initZubridgeMiddleware;
