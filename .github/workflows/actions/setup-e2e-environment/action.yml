name: 'Setup E2E Environment'
description: 'Downloads artifacts and sets up environment for E2E tests'

inputs:
  os:
    description: "Operating system to run tests on"
    required: true
  artifact_name:
    description: "Name of the artifact to download"
    required: true
  app:
    description: "Type of application to test"
    required: true
  mode:
    description: "Test mode"
    required: true

runs:
  using: "composite"
  steps:
    - name: Download Shared Packages
      uses: actions/download-artifact@v4
      with:
        name: shared-packages
        path: packages

    - name: Set platform-specific variables
      id: platform-vars
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          echo "platform=linux" >> $GITHUB_OUTPUT
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          echo "platform=macos" >> $GITHUB_OUTPUT
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "platform=windows" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact_name }}
        path: ${{ inputs.app == 'electron' && format('./apps/{0}-example/dist-{1}', inputs.app, inputs.mode) || format('./apps/{0}-example', inputs.app) }}

    - name: Show Download Information
      run: |
        echo "Artifact ${{ inputs.artifact_name }} downloaded to target location"
        if [ "${{ inputs.app }}" == "electron" ]; then
          TARGET_DIR="./apps/${{ inputs.app }}-example/dist-${{ inputs.mode }}"
          echo "Electron artifacts in $TARGET_DIR:"
          ls -la "$TARGET_DIR"

          # Check platform-specific directories
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "Linux build directory:"
            if [ -d "$TARGET_DIR/linux-unpacked" ]; then
              ls -la "$TARGET_DIR/linux-unpacked"
              if [ -f "$TARGET_DIR/linux-unpacked/zubridge-electron-example-${{ inputs.mode }}" ]; then
                echo "Executable exists and permissions:"
                ls -la "$TARGET_DIR/linux-unpacked/zubridge-electron-example-${{ inputs.mode }}"
              else
                echo "ERROR: Executable not found!"
              fi
            else
              echo "WARNING: linux-unpacked directory not found!"
            fi
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "macOS build directory:"
            if [ -d "$TARGET_DIR/mac" ]; then
              ls -la "$TARGET_DIR/mac"
              if [ -d "$TARGET_DIR/mac/zubridge-electron-example-${{ inputs.mode }}.app" ]; then
                echo "App bundle exists:"
                ls -la "$TARGET_DIR/mac/zubridge-electron-example-${{ inputs.mode }}.app/Contents/MacOS/"
              else
                echo "ERROR: App bundle not found!"
              fi
            else
              echo "WARNING: mac directory not found!"
            fi
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "Windows build directory:"
            if [ -d "$TARGET_DIR/win-unpacked" ]; then
              ls -la "$TARGET_DIR/win-unpacked"
              if [ -f "$TARGET_DIR/win-unpacked/zubridge-electron-example-${{ inputs.mode }}.exe" ]; then
                echo "Executable exists:"
                ls -la "$TARGET_DIR/win-unpacked/zubridge-electron-example-${{ inputs.mode }}.exe"
              else
                echo "ERROR: Executable not found!"
              fi
            else
              echo "WARNING: win-unpacked directory not found!"
            fi
          fi
        elif [[ "${{ inputs.app }}" == "tauri" || "${{ inputs.app }}" == "tauri-v1" ]]; then
          TARGET_DIR="./apps/${{ inputs.app }}-example"
          echo "Tauri artifacts in $TARGET_DIR:"
          ls -la "$TARGET_DIR"

          # Check expected sub-directories
          if [ -d "$TARGET_DIR/src-tauri/target/release" ]; then
            echo "release/ directory found"
            ls -la "$TARGET_DIR/src-tauri/target/release"
          fi

          if [ -d "$TARGET_DIR/src-tauri/target/release/bundle" ]; then
            echo "release/bundle/ directory found"
            ls -la "$TARGET_DIR/src-tauri/target/release/bundle"
          fi
        fi
      shell: bash

    - name: Show Build Information
      run: |
        echo "::notice::Running E2E tests for ${{ inputs.app }}:${{ inputs.mode }} mode on ${{ inputs.os }} with build ID"
      shell: bash

    - name: Apply Linux Kernel Workaround
      if: inputs.app == 'electron' && runner.os == 'Linux'
      run: sudo sysctl -q -w kernel.apparmor_restrict_unprivileged_userns=0
      shell: bash
