name: Post-Release Tasks

on:
  workflow_call:
    inputs:
      branch_type:
        description: 'Branch type (main, feature)'
        required: true
        type: string
      target_branch:
        description: 'Target branch to release from'
        required: true
        type: string
      next_version_branch:
        description: 'Next feature branch name'
        required: true
        type: string
      release_version:
        description: 'Release type (patch, minor, major, prepatch, preminor, premajor, prerelease)'
        required: true
        type: string
      packages:
        description: 'Package(s) to release (comma-separated)'
        required: false
        type: string
        default: ''
      release_tag:
        description: 'Release tag (e.g. v1.1.1)'
        required: true
        type: string
      dry_run:
        description: 'Do not touch or write anything. Show the commands.'
        required: true
        default: false
        type: boolean
    secrets:
      github_bot_token:
        description: 'GitHub token for authentication'
        required: true
      deploy_key:
        description: 'SSH deploy key for pushing to the repository'
        required: true

jobs:
  post-release:
    runs-on: ubuntu-latest
    steps:
      - name: üë∑ Checkout target branch
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.deploy_key }}
          ref: ${{ inputs.target_branch }}
          fetch-depth: 0 # Full history needed for versioning

      - name: üõ†Ô∏è Setup workspace
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: '20'

      - name: üå± Create new feature branch for next major version
        shell: bash
        env:
          PACKAGE: ${{ inputs.packages }}
          TARGET_BRANCH: ${{ inputs.target_branch }}
        run: |
          # Extract package name from branch name (more flexible pattern)
          BRANCH_PACKAGE=""
          
          # Try standard pattern first (feature/package-vX.x)
          if [[ "${TARGET_BRANCH}" =~ ^feature/([^-]+)-v[0-9]+\.x$ ]]; then
            BRANCH_PACKAGE="${BASH_REMATCH[1]}"
            echo "Extracted package name from standard branch pattern: ${BRANCH_PACKAGE}"
          # For custom branch names, check if it contains the package name
          elif [[ "${TARGET_BRANCH}" == *"${PACKAGE}"* ]]; then
            echo "Custom branch name contains package name: ${PACKAGE}"
            BRANCH_PACKAGE="${PACKAGE}"
          fi

          # Check if the package being released matches the branch package or if it's a custom branch
          PACKAGE_MATCHES_BRANCH=false
          if [[ "${BRANCH_PACKAGE}" == "${PACKAGE}" || "${TARGET_BRANCH}" == *"${PACKAGE}"* ]]; then
            PACKAGE_MATCHES_BRANCH=true
            echo "‚úÖ Package '${PACKAGE}' matches branch name or is contained in custom branch name"
          else
            echo "‚ö†Ô∏è Package '${PACKAGE}' does not match branch package name '${BRANCH_PACKAGE}'"
          fi

          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            if [[ "${{ contains(inputs.release_version, 'major') && !contains(inputs.release_version, 'pre') && inputs.branch_type == 'feature' }}" == "true" ]]; then
              if [[ "${PACKAGE_MATCHES_BRANCH}" == "true" ]]; then
                # Use the input branch name directly
                FEATURE_BRANCH="${{ inputs.next_version_branch }}"
                echo "DRY RUN: Would create new feature branch ${FEATURE_BRANCH} for next major version (using pre-calculated name)"
              else
                echo "DRY RUN: Would NOT create new feature branch (package doesn't match branch)"
              fi
            else
              echo "DRY RUN: Not a major release from feature branch, would skip creating new feature branch"
            fi
          else
            if [[ "${{ contains(inputs.release_version, 'major') && !contains(inputs.release_version, 'pre') && inputs.branch_type == 'feature' }}" == "true" ]]; then
              if [[ "${PACKAGE_MATCHES_BRANCH}" == "true" ]]; then
                echo "::group::Creating feature branch for next major version"

                # Use the input branch name directly
                FEATURE_BRANCH="${{ inputs.next_version_branch }}"
                echo "Using pre-calculated next feature branch name: ${FEATURE_BRANCH}"

                # Check if branch already exists remotely
                if git ls-remote --heads origin ${FEATURE_BRANCH} | grep -q ${FEATURE_BRANCH}; then
                  echo "The feature branch ${FEATURE_BRANCH} already exists remotely."
                  exit 0
                fi

                # Check if branch exists locally
                if git rev-parse --verify --quiet "${FEATURE_BRANCH}" >/dev/null; then
                  echo "The feature branch ${FEATURE_BRANCH} already exists locally."
                else
                  echo "Creating the feature branch ${FEATURE_BRANCH}..."

                  # Create the branch from main
                  git checkout main
                  git pull origin main
                  git branch ${FEATURE_BRANCH}
                  git checkout ${FEATURE_BRANCH}

                  # Extract version number for commit message (assuming format feature/pkg-vMAJOR.x)
                  NEXT_MAJOR_VERSION=$(echo "${FEATURE_BRANCH}" | sed -n 's/.*-v\([0-9]*\)\.x$/\1/p')
                  if [ -z "${NEXT_MAJOR_VERSION}" ]; then
                    echo "::warning::Could not extract major version from branch name ${FEATURE_BRANCH}. Using generic commit message."
                    git commit --allow-empty -m "chore: initialize next feature branch [skip ci]"
                  else
                    git commit --allow-empty -m "chore: initialize feature branch for v${NEXT_MAJOR_VERSION} [skip ci]"
                  fi
                  echo "Initialized feature branch with empty commit"

                  # Return to the original branch
                  git checkout ${{ inputs.target_branch }}
                fi

                echo "‚úÖ Feature branch ${FEATURE_BRANCH} is ready"
                echo "::endgroup::"
              else
                echo "Package '${PACKAGE}' doesn't match branch name '${BRANCH_PACKAGE}', skipping creation of new feature branch"
              fi
            else
              echo "Not a major release from feature branch, skipping creating new feature branch"
            fi
          fi

      - name: üîÑ Merge feature branch to main
        shell: bash
        env:
          PACKAGE: ${{ inputs.packages }}
          TARGET_BRANCH: ${{ inputs.target_branch }}
        run: |
          # Extract package name from branch name (more flexible pattern)
          BRANCH_PACKAGE=""
          
          # Try standard pattern first (feature/package-vX.x)
          if [[ "${TARGET_BRANCH}" =~ ^feature/([^-]+)-v[0-9]+\.x$ ]]; then
            BRANCH_PACKAGE="${BASH_REMATCH[1]}"
            echo "Extracted package name from standard branch pattern: ${BRANCH_PACKAGE}"
          # For custom branch names, check if it contains the package name
          elif [[ "${TARGET_BRANCH}" == *"${PACKAGE}"* ]]; then
            echo "Custom branch name contains package name: ${PACKAGE}"
            BRANCH_PACKAGE="${PACKAGE}"
          fi

          # Check if the package being released matches the branch package or if it's a custom branch
          PACKAGE_MATCHES_BRANCH=false
          if [[ "${BRANCH_PACKAGE}" == "${PACKAGE}" || "${TARGET_BRANCH}" == *"${PACKAGE}"* ]]; then
            PACKAGE_MATCHES_BRANCH=true
            echo "‚úÖ Package '${PACKAGE}' matches branch name or is contained in custom branch name"
          else
            echo "‚ö†Ô∏è Package '${PACKAGE}' does not match branch package name '${BRANCH_PACKAGE}'"
          fi

          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            if [[ "${{ contains(inputs.release_version, 'major') && !contains(inputs.release_version, 'pre') && startsWith(inputs.target_branch, 'feature/') }}" == "true" ]]; then
              if [[ "${PACKAGE_MATCHES_BRANCH}" == "true" ]]; then
                echo "DRY RUN: Would merge feature branch ${{ inputs.target_branch }} to main (package matches branch)"
              else
                echo "DRY RUN: Would NOT merge feature branch ${{ inputs.target_branch }} to main (package doesn't match branch)"
              fi
            else
              echo "DRY RUN: Not a major release from feature branch, would skip merge to main"
            fi
          else
            if [[ "${{ contains(inputs.release_version, 'major') && !contains(inputs.release_version, 'pre') && startsWith(inputs.target_branch, 'feature/') }}" == "true" ]]; then
              if [[ "${PACKAGE_MATCHES_BRANCH}" == "true" ]]; then
                echo "::group::Merging feature branch to main"
                
                # Ensure we have the latest main branch
                git fetch origin main

                # Check if we're on a feature branch
                if [[ "${{ inputs.target_branch }}" == feature/* ]]; then
                  echo "We are on feature branch ${{ inputs.target_branch }}, preparing to merge to main"

                  # Create a temporary branch from main to merge into
                  git checkout origin/main -b temp-main-for-merge

                  # Set git identity for potential conflict resolution commits
                  git config user.email "actions@github.com"
                  git config user.name "GitHub Actions"

                  # Try to merge the feature branch into the temp branch
                  # Using --no-ff to ensure a merge commit is created
                  MERGE_MESSAGE="feat: merge ${{ inputs.target_branch }} to main for ${{ inputs.packages }} ${{ inputs.release_tag }} release [skip ci]"

                  if ! git merge --no-ff ${{ inputs.target_branch }} -m "$MERGE_MESSAGE"; then
                    echo "::error::Merge conflict detected when merging ${{ inputs.target_branch }} to main"

                    # Abort the merge
                    git merge --abort

                    # Create a detailed error message
                    echo "::group::Merge Conflict Details"
                    echo "The automated merge from ${{ inputs.target_branch }} to main failed due to conflicts."
                    echo "Please resolve these conflicts manually by:"
                    echo "1. Creating a PR from ${{ inputs.target_branch }} to main"
                    echo "2. Resolving the conflicts in the PR"
                    echo "3. Merging the PR"
                    echo "4. Then run this release workflow again from the main branch"

                    # Try to identify conflicting files to provide more context
                    echo "Potential conflicting files:"
                    git checkout ${{ inputs.target_branch }}
                    FEATURE_FILES=$(git diff --name-only origin/main)
                    git checkout origin/main
                    MAIN_FILES=$(git diff --name-only ${{ inputs.target_branch }})
                    echo "$FEATURE_FILES" | grep -f <(echo "$MAIN_FILES") || echo "Could not determine specific conflicting files"
                    echo "::endgroup::"

                    # Return to the original branch
                    git checkout ${{ inputs.target_branch }}

                    # Exit with error
                    exit 1
                  fi

                  # If we get here, the merge was successful
                  echo "Successfully merged ${{ inputs.target_branch }} to temp-main-for-merge"

                  # We'll push this branch later in the push step

                  # Set a flag to indicate successful merge
                  echo "MERGE_SUCCESSFUL=true" >> $GITHUB_ENV

                  # Return to the original branch for the rest of the release process
                  git checkout ${{ inputs.target_branch }}
                else
                  echo "Not on a feature branch, skipping merge to main"
                fi

                echo "::endgroup::"
              else
                echo "Package '${PACKAGE}' doesn't match branch name '${BRANCH_PACKAGE}', skipping merge to main"
              fi
            else
              echo "Not a major release from feature branch, skipping merge to main"
            fi
          fi

      - name: üöÄ Push Feature Branch
        id: push_tags
        shell: bash
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would push feature branch"

            # Use the input branch name directly
            FEATURE_BRANCH="${{ inputs.next_version_branch }}"

            echo "DRY RUN: Would push the following branches if they exist:"
            echo "  - ${FEATURE_BRANCH} (if created, using pre-calculated name)"
            echo "  - main (if merged from feature branch)"
          else
            echo "Git log:"
            git log --oneline -n 5

            # Use the input branch name directly
            FEATURE_BRANCH="${{ inputs.next_version_branch }}"
            echo "Using pre-calculated next feature branch name for push: ${FEATURE_BRANCH}"

            # Push the feature branch if it exists locally
            if git rev-parse --verify --quiet "${FEATURE_BRANCH}" >/dev/null; then
              echo "Pushing the feature branch: ${FEATURE_BRANCH}..."
              git push --no-verify --set-upstream origin "${FEATURE_BRANCH}"
              echo "‚úÖ Successfully pushed feature branch ${FEATURE_BRANCH}"
            fi

            # If we merged a feature branch to main, push the main branch
            if [[ "${MERGE_SUCCESSFUL}" == "true" ]] && git rev-parse --verify --quiet "temp-main-for-merge" >/dev/null; then
              echo "Pushing merged main branch..."
              git checkout temp-main-for-merge
              git push --no-verify --force-with-lease origin temp-main-for-merge:main
              echo "‚úÖ Successfully pushed merged main branch"

              # Return to the original branch
              git checkout ${{ inputs.target_branch }}
            fi
          fi
