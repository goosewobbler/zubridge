name: Post-Release Tasks

on:
  workflow_call:
    inputs:
      branch_type:
        description: 'Branch type (main, feature)'
        required: true
        type: string
      target_branch:
        description: 'Target branch to release from'
        required: true
        type: string
      next_version_branch:
        description: 'Next feature branch name'
        required: true
        type: string
      release_version:
        description: 'Release type (patch, minor, major, prepatch, preminor, premajor, prerelease)'
        required: true
        type: string
      release_tag:
        description: 'Release tag (e.g. v1.1.1)'
        required: true
        type: string
      dry_run:
        description: 'Do not touch or write anything. Show the commands.'
        required: true
        default: false
        type: boolean
    secrets:
      github_bot_token:
        description: 'GitHub token for authentication'
        required: true
      deploy_key:
        description: 'SSH deploy key for pushing to the repository'
        required: true

jobs:
  post-release:
    runs-on: ubuntu-latest
    steps:
      - name: 👷 Checkout target branch
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.deploy_key }}
          ref: ${{ inputs.target_branch }}
          fetch-depth: 0 # Full history needed for versioning

      - name: 🛠️ Setup workspace
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: '20'

      - name: 🌱 Create new feature branch for next major version
        shell: bash
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            if [[ "${{ contains(inputs.release_version, 'major') && !contains(inputs.release_version, 'pre') && inputs.branch_type == 'feature' }}" == "true" ]]; then
              # Find the first package.json file in the packages directory
              FIRST_PKG_JSON=$(find packages -name "package.json" -type f -not -path "*/node_modules/*" | sort | head -n 1)

              if [ -z "$FIRST_PKG_JSON" ]; then
                echo "::error::Could not find any package.json files in the packages directory"
                exit 1
              fi

              # Get package details
              PKG_NAME=$(cat "${FIRST_PKG_JSON}" | jq -r '.name')
              CURRENT_VERSION=$(cat "${FIRST_PKG_JSON}" | jq -r '.version')

              echo "Using package for version calculation: ${PKG_NAME} (${CURRENT_VERSION})"

              CURRENT_MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)

              # For pre-1.0 versions, the next major version is 1
              if [ "${CURRENT_MAJOR}" -eq "0" ]; then
                NEXT_MAJOR="1"
              else
                NEXT_MAJOR=$((CURRENT_MAJOR + 1))
              fi

              FEATURE_BRANCH="feature/v${NEXT_MAJOR}.x"
              echo "DRY RUN: Would create new feature branch ${FEATURE_BRANCH} for next major version"
            else
              echo "DRY RUN: Not a major release from feature branch, would skip creating new feature branch"
            fi
          else
            if [[ "${{ contains(inputs.release_version, 'major') && !contains(inputs.release_version, 'pre') && inputs.branch_type == 'feature' }}" == "true" ]]; then
              echo "::group::Creating feature branch for next major version"

              # Find the first package.json file in the packages directory
              FIRST_PKG_JSON=$(find packages -name "package.json" -type f -not -path "*/node_modules/*" | sort | head -n 1)

              if [ -z "$FIRST_PKG_JSON" ]; then
                echo "::error::Could not find any package.json files in the packages directory"
                exit 1
              fi

              # Get package details
              PKG_NAME=$(cat "${FIRST_PKG_JSON}" | jq -r '.name')
              CURRENT_VERSION=$(cat "${FIRST_PKG_JSON}" | jq -r '.version')

              echo "Using package for version calculation: ${PKG_NAME} (${CURRENT_VERSION})"

              CURRENT_MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)

              # For pre-1.0 versions, the next major version is 1
              if [ "${CURRENT_MAJOR}" -eq "0" ]; then
                NEXT_MAJOR="1"
              else
                NEXT_MAJOR=$((CURRENT_MAJOR + 1))
              fi

              FEATURE_BRANCH="feature/v${NEXT_MAJOR}.x"

              # Check if branch already exists remotely
              if git ls-remote --heads origin ${FEATURE_BRANCH} | grep -q ${FEATURE_BRANCH}; then
                echo "The feature branch ${FEATURE_BRANCH} already exists remotely."
                exit 0
              fi

              # Check if branch exists locally
              if git rev-parse --verify --quiet "${FEATURE_BRANCH}" >/dev/null; then
                echo "The feature branch ${FEATURE_BRANCH} already exists locally."
              else
                echo "Creating the feature branch ${FEATURE_BRANCH}..."

                # Create the branch from main
                git checkout main
                git pull origin main
                git branch ${FEATURE_BRANCH}
                git checkout ${FEATURE_BRANCH}

                git commit --allow-empty -m "chore: initialize feature branch for v${NEXT_MAJOR} [skip ci]"
                echo "Initialized feature branch with empty commit"

                # Return to the original branch
                git checkout ${{ inputs.target_branch }}
              fi

              echo "✅ Feature branch ${FEATURE_BRANCH} is ready"
              echo "::endgroup::"
            else
              echo "Not a major release from feature branch, skipping creating new feature branch"
            fi
          fi

      - name: 🔄 Merge feature branch to main
        shell: bash
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            if [[ "${{ contains(inputs.release_version, 'major') && !contains(inputs.release_version, 'pre') && startsWith(inputs.target_branch, 'feature/') }}" == "true" ]]; then
              echo "DRY RUN: Would merge feature branch ${{ inputs.target_branch }} to main"
            else
              echo "DRY RUN: Not a major release from feature branch, would skip merge to main"
            fi
          else
            if [[ "${{ contains(inputs.release_version, 'major') && !contains(inputs.release_version, 'pre') && startsWith(inputs.target_branch, 'feature/') }}" == "true" ]]; then
              echo "::group::Merging feature branch to main"

              # Ensure we have the latest main branch
              git fetch origin main

              # Check if we're on a feature branch
              if [[ "${{ inputs.target_branch }}" == feature/* ]]; then
                echo "We are on feature branch ${{ inputs.target_branch }}, preparing to merge to main"

                # Create a temporary branch from main to merge into
                git checkout origin/main -b temp-main-for-merge

                # Set git identity for potential conflict resolution commits
                git config user.email "actions@github.com"
                git config user.name "GitHub Actions"

                # Try to merge the feature branch into the temp branch
                # Using --no-ff to ensure a merge commit is created
                if ! git merge --no-ff ${{ inputs.target_branch }} -m "feat: merge ${{ inputs.target_branch }} to main for v$(jq -r '.version' package.json) release [skip ci]"; then
                  echo "::error::Merge conflict detected when merging ${{ inputs.target_branch }} to main"

                  # Abort the merge
                  git merge --abort

                  # Create a detailed error message
                  echo "::group::Merge Conflict Details"
                  echo "The automated merge from ${{ inputs.target_branch }} to main failed due to conflicts."
                  echo "Please resolve these conflicts manually by:"
                  echo "1. Creating a PR from ${{ inputs.target_branch }} to main"
                  echo "2. Resolving the conflicts in the PR"
                  echo "3. Merging the PR"
                  echo "4. Then run this release workflow again from the main branch"

                  # Try to identify conflicting files to provide more context
                  echo "Potential conflicting files:"
                  git checkout ${{ inputs.target_branch }}
                  FEATURE_FILES=$(git diff --name-only origin/main)
                  git checkout origin/main
                  MAIN_FILES=$(git diff --name-only ${{ inputs.target_branch }})
                  echo "$FEATURE_FILES" | grep -f <(echo "$MAIN_FILES") || echo "Could not determine specific conflicting files"
                  echo "::endgroup::"

                  # Return to the original branch
                  git checkout ${{ inputs.target_branch }}

                  # Exit with error
                  exit 1
                fi

                # If we get here, the merge was successful
                echo "Successfully merged ${{ inputs.target_branch }} to temp-main-for-merge"

                # We'll push this branch later in the push step

                # Set a flag to indicate successful merge
                echo "MERGE_SUCCESSFUL=true" >> $GITHUB_ENV

                # Return to the original branch for the rest of the release process
                git checkout ${{ inputs.target_branch }}
              else
                echo "Not on a feature branch, skipping merge to main"
              fi

              echo "::endgroup::"
            else
              echo "Not a major release from feature branch, skipping merge to main"
            fi
          fi

      - name: 🚀 Push Feature Branch
        id: push_tags
        shell: bash
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would push feature branch"

            # Find the highest version across all packages
            PACKAGE_JSONS=$(find packages -name "package.json" -type f -not -path "*/node_modules/*" | sort)

            # Initialize variables to track the highest version
            HIGHEST_VERSION=""
            HIGHEST_MAJOR=0

            echo "Finding highest version across packages (dry run):"

            # Loop through all package.json files to find the highest version
            for PKG_JSON in $PACKAGE_JSONS; do
              if [ -f "${PKG_JSON}" ]; then
                PKG_NAME=$(cat "${PKG_JSON}" | jq -r '.name')
                PKG_VERSION=$(cat "${PKG_JSON}" | jq -r '.version')
                echo "  - ${PKG_NAME}: ${PKG_VERSION}"

                # Parse major version
                PKG_MAJOR=$(echo $PKG_VERSION | cut -d. -f1)

                # Compare versions to find the highest
                if [ -z "$HIGHEST_VERSION" ] || [ $PKG_MAJOR -gt $HIGHEST_MAJOR ]; then
                  HIGHEST_VERSION=$PKG_VERSION
                  HIGHEST_MAJOR=$PKG_MAJOR
                fi
              fi
            done

            echo "Using highest version found: ${HIGHEST_VERSION}"

            # Set the current version based on the highest found
            CURRENT_MAJOR=$HIGHEST_MAJOR

            # For pre-1.0 versions, the next major version is 1
            if [ "${CURRENT_MAJOR}" -eq "0" ]; then
              NEXT_MAJOR="1"
            else
              NEXT_MAJOR=$((CURRENT_MAJOR + 1))
            fi

            FEATURE_BRANCH="feature/v${NEXT_MAJOR}.x"

            echo "DRY RUN: Would push the following branches if they exist:"
            echo "  - ${FEATURE_BRANCH} (if created)"
            echo "  - main (if merged from feature branch)"
          else
            echo "Git log:"
            git log --oneline -n 5

            # Find the highest version across all packages
            PACKAGE_JSONS=$(find packages -name "package.json" -type f -not -path "*/node_modules/*" | sort)

            # Initialize variables to track the highest version
            HIGHEST_VERSION=""
            HIGHEST_MAJOR=0

            echo "Finding highest version across packages:"

            # Loop through all package.json files to find the highest version
            for PKG_JSON in $PACKAGE_JSONS; do
              if [ -f "${PKG_JSON}" ]; then
                PKG_NAME=$(cat "${PKG_JSON}" | jq -r '.name')
                PKG_VERSION=$(cat "${PKG_JSON}" | jq -r '.version')
                echo "  - ${PKG_NAME}: ${PKG_VERSION}"

                # Parse major version
                PKG_MAJOR=$(echo $PKG_VERSION | cut -d. -f1)

                # Compare versions to find the highest
                if [ -z "$HIGHEST_VERSION" ] || [ $PKG_MAJOR -gt $HIGHEST_MAJOR ]; then
                  HIGHEST_VERSION=$PKG_VERSION
                  HIGHEST_MAJOR=$PKG_MAJOR
                fi
              fi
            done

            echo "Using highest version found: ${HIGHEST_VERSION}"

            # Set the current version based on the highest found
            CURRENT_MAJOR=$HIGHEST_MAJOR

            # For pre-1.0 versions, the next major version is 1
            if [ "${CURRENT_MAJOR}" -eq "0" ]; then
              NEXT_MAJOR="1"
            else
              NEXT_MAJOR=$((CURRENT_MAJOR + 1))
            fi

            FEATURE_BRANCH="feature/v${NEXT_MAJOR}.x"

            # Push the feature branch if it exists locally
            if git rev-parse --verify --quiet "${FEATURE_BRANCH}" >/dev/null; then
              echo "Pushing the feature branch: ${FEATURE_BRANCH}..."
              git push --no-verify --set-upstream origin "${FEATURE_BRANCH}"
              echo "✅ Successfully pushed feature branch ${FEATURE_BRANCH}"
            fi

            # If we merged a feature branch to main, push the main branch
            if [[ "${MERGE_SUCCESSFUL}" == "true" ]] && git rev-parse --verify --quiet "temp-main-for-merge" >/dev/null; then
              echo "Pushing merged main branch..."
              git checkout temp-main-for-merge
              git push --no-verify --force-with-lease origin temp-main-for-merge:main
              echo "✅ Successfully pushed merged main branch"

              # Return to the original branch
              git checkout ${{ inputs.target_branch }}
            fi
          fi
