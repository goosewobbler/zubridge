name: Calculate Release Branches

on:
  workflow_call:
    inputs:
      branch:
        description: 'Branch type to release from (feature, main)'
        required: true
        type: string
      release_version:
        description: 'Release type (patch, minor, major, prepatch, preminor, premajor, prerelease)'
        required: true
        type: string
      packages:
        description: 'Package(s) to release (comma-separated, leave blank for all)'
        required: false
        type: string
        default: ''
    outputs:
      target_branch:
        description: 'Resolved target branch name'
        value: ${{ jobs.calculate.outputs.target_branch }}
      next_version_branch:
        description: 'Next feature branch name for major releases'
        value: ${{ jobs.calculate.outputs.next_version_branch }}
      calculated_version:
        description: 'The calculated version number'
        value: ${{ jobs.calculate.outputs.calculated_version }}

jobs:
  # Validate release parameters
  check:
    runs-on: 'ubuntu-latest'
    steps:
      - name: Check Release Parameters
        env:
          IS_MAJOR: ${{ contains(inputs.release_version, 'major') }}
          IS_FEATURE: ${{ inputs.branch == 'feature' }}
        run: |
          # Ensure major releases only happen from feature branches
          if [ "${IS_MAJOR}" == 'true' -a "${IS_FEATURE}" == 'false' ]; then
            echo "::error::Major releases must come from feature branches"
            exit 1
          fi

  # Calculate version numbers and determine target branches
  calculate:
    runs-on: 'ubuntu-latest'
    outputs:
      target_branch: ${{ steps.define_branches.outputs.target_branch }}
      next_version_branch: ${{ steps.define_branches.outputs.next_version_branch }}
      calculated_version: ${{ steps.calculate_versions.outputs.calculated_version }}
    needs: ['check']
    steps:
      - name: üë∑ Checkout repository
        uses: actions/checkout@v4
        with:
          # Always checkout main first to calculate the target branch
          ref: 'main'

      - name: üßÆ Calculate version numbers
        id: calculate_versions
        shell: bash
        env:
          BRANCH_TYPE: ${{ inputs.branch }}
          RELEASE_TYPE: ${{ inputs.release_version }}
          INPUT_PACKAGES: ${{ inputs.packages }}
        run: |
          PKG_JSON_PATH=""
          FIRST_PACKAGE_SIMPLE_NAME=""

          # Determine the package.json to use as the source of truth
          if [ -n "$INPUT_PACKAGES" ]; then
            # Packages specified, use the first one
            FIRST_PACKAGE_FULL_NAME=$(echo "$INPUT_PACKAGES" | cut -d',' -f1 | xargs) # Get first package, trim whitespace
            # Extract simple name (e.g., 'electron' from '@zubridge/electron' or 'electron' from 'electron')
            FIRST_PACKAGE_SIMPLE_NAME=$(echo "$FIRST_PACKAGE_FULL_NAME" | sed 's|.*/||')
            PKG_JSON_PATH="packages/${FIRST_PACKAGE_SIMPLE_NAME}/package.json"
            echo "Packages specified. Using first package for version: ${FIRST_PACKAGE_FULL_NAME} -> ${PKG_JSON_PATH}"
          else
            # No packages specified (release all), use default source
            FIRST_PACKAGE_SIMPLE_NAME="electron" # Default package name
            PKG_JSON_PATH="packages/${FIRST_PACKAGE_SIMPLE_NAME}/package.json"
            echo "No specific packages specified. Using default for version: ${PKG_JSON_PATH}"
          fi

          # Check if the resolved package.json file exists
          if [ ! -f "$PKG_JSON_PATH" ]; then
            echo "::error::Could not find package.json at resolved path: ${PKG_JSON_PATH}"
            exit 1
          fi

          # Get package details from the RESOLVED path
          PKG_NAME=$(cat "${PKG_JSON_PATH}" | jq -r '.name')
          PKG_VERSION=$(cat "${PKG_JSON_PATH}" | jq -r '.version')

          echo "Using package for version calculation: ${PKG_NAME} (${PKG_VERSION}) from ${PKG_JSON_PATH}"

          # Parse version components
          CURRENT_VERSION=$PKG_VERSION
          CURRENT_MAJOR_VERSION=$(echo $CURRENT_VERSION | cut -d. -f1)
          CURRENT_MINOR_VERSION=$(echo $CURRENT_VERSION | cut -d. -f2)
          # Correctly extract patch number, removing any pre-release identifiers
          CURRENT_PATCH_VERSION=$(echo $CURRENT_VERSION | cut -d. -f3 | cut -d- -f1)

          echo "current-version=${CURRENT_VERSION}"
          echo "current-major-version=${CURRENT_MAJOR_VERSION}"
          echo "current-minor-version=${CURRENT_MINOR_VERSION}"
          echo "current-patch-version=${CURRENT_PATCH_VERSION}"

          echo "calculated_version=${CURRENT_VERSION}" >>"${GITHUB_OUTPUT}"

          # For pre-1.0 versions, the next major version is still 1
          # This ensures feature branches are named correctly
          if [ "${CURRENT_MAJOR_VERSION}" -eq "0" ]; then
            FEATURE_MAJOR_VERSION="1"
          else
            FEATURE_MAJOR_VERSION="$((CURRENT_MAJOR_VERSION + 1))"
          fi

          # Calculate major version for the CURRENT feature branch line
          if [ "${CURRENT_MAJOR_VERSION}" -eq "0" ]; then
            CURRENT_FEATURE_MAJOR_VERSION="1"
          else
            CURRENT_FEATURE_MAJOR_VERSION="${CURRENT_MAJOR_VERSION}"
          fi

          echo "feature-major-version=${FEATURE_MAJOR_VERSION}"
          echo "feature-major-version=${FEATURE_MAJOR_VERSION}" >>"${GITHUB_OUTPUT}"
          echo "current-feature-major-version=${CURRENT_FEATURE_MAJOR_VERSION}" >>"${GITHUB_OUTPUT}"
          # Output the simple package name used
          echo "package_name=${FIRST_PACKAGE_SIMPLE_NAME}" >>"${GITHUB_OUTPUT}"

      - name: üéØ Define target branch names
        id: define_branches
        shell: bash
        env:
          BRANCH_TYPE: ${{ inputs.branch }}
          FEATURE_MAJOR_VERSION: ${{ steps.calculate_versions.outputs.feature-major-version}}
          # Get the CURRENT feature major version
          CURRENT_FEATURE_MAJOR_VERSION: ${{ steps.calculate_versions.outputs.current-feature-major-version}}
          # Get the package name from the previous step
          PACKAGE_NAME: ${{ steps.calculate_versions.outputs.package_name }}
        run: |
          TARGET_BRANCH_NAME=""
          NEXT_BRANCH_NAME=""

          if [ "${BRANCH_TYPE}" == 'feature' ]; then
            # For feature branches, target the CURRENT feature branch line
            TARGET_BRANCH_NAME="feature/${PACKAGE_NAME}-v${CURRENT_FEATURE_MAJOR_VERSION}.x"
            echo "target_branch=${TARGET_BRANCH_NAME}"
            echo "target_branch=${TARGET_BRANCH_NAME}" >> $GITHUB_OUTPUT
          else
            # For main, use as-is
            TARGET_BRANCH_NAME="${BRANCH_TYPE}"
            echo "target_branch=${TARGET_BRANCH_NAME}" >> $GITHUB_OUTPUT
          fi

          # The next version branch ALWAYS uses the NEXT major version
          NEXT_BRANCH_NAME="feature/${PACKAGE_NAME}-v${FEATURE_MAJOR_VERSION}.x"
          echo "next_version_branch=${NEXT_BRANCH_NAME}"
          echo "next_version_branch=${NEXT_BRANCH_NAME}" >>"${GITHUB_OUTPUT}"

      - name: üîç Verify branch exists
        shell: bash
        env:
          BRANCH_TYPE: ${{ inputs.branch }}
          TARGET_BRANCH: ${{ steps.define_branches.outputs.target_branch }}
        run: |
          echo "Verifying branch: ${TARGET_BRANCH}"

          # Check if branch exists remotely
          if ! git ls-remote --heads origin "${TARGET_BRANCH}" | grep -q "${TARGET_BRANCH}"; then
            if [ "${BRANCH_TYPE}" == "feature" ]; then
              echo "::error::Feature branch '${TARGET_BRANCH}' does not exist. Please create this branch first or specify a different branch."
              # Update error message to reflect the new convention
              echo "::error::Expected branch naming convention: feature/{package_name}-v{next_major_version}.x (e.g., feature/electron-v2.x)"
            else
              echo "::error::Branch '${TARGET_BRANCH}' does not exist."
            fi
            exit 1
          fi

          echo "‚úÖ Branch '${TARGET_BRANCH}' exists and is valid"
