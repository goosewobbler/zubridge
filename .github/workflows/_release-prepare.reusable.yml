name: Prepare Release

on:
  workflow_call:
    inputs:
      target_branch:
        description: 'Target branch to prepare release from'
        required: true
        type: string
      next_version_branch:
        description: 'Next feature branch name'
        required: true
        type: string
      release_version:
        description: 'Release type (patch, minor, major, prepatch, preminor, premajor, prerelease)'
        required: true
        type: string
      packages:
        description: 'Package(s) to release (comma-separated)'
        required: false
        type: string
        default: ''
      dry_run:
        description: 'Do not touch or write anything. Show the commands.'
        required: true
        default: false
        type: boolean
      branch_type:
        description: 'Branch type (main, feature)'
        required: true
        type: string
      calculated_version:
        description: 'The calculated version number'
        required: true
        type: string
    secrets:
      github_bot_token:
        description: 'GitHub token for authentication'
        required: true
      deploy_key:
        description: 'SSH deploy key for pushing to the repository'
        required: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: üë∑ Checkout target branch
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.deploy_key }}
          ref: ${{ inputs.target_branch }}
          fetch-depth: 0 # Full history needed for versioning

      - name: üîç Validate target branch
        shell: bash
        run: |
          # Ensure we have the latest state of the remote
          git fetch origin

          # Check if the target branch exists on the remote
          if ! git ls-remote --exit-code --heads origin "${{ inputs.target_branch }}" >/dev/null; then
            echo "::error::Target branch '${{ inputs.target_branch }}' does not exist on the remote."
            echo "Please push your branch to the remote repository first."
            exit 1
          fi

      - name: üõ†Ô∏è Setup workspace
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: '20'

      - name: üîç Validate packages
        if: ${{ inputs.packages != '' }}
        shell: bash
        run: |
          echo "Validating packages: ${{ inputs.packages }}"

          # Split the comma-separated list into an array
          IFS=',' read -ra PKG_LIST <<< "${{ inputs.packages }}"

          # Initialize arrays for found and not found packages
          FOUND_PACKAGES=()
          NOT_FOUND_PACKAGES=()

          # Check each package name against the package.json files
          for pkg_name in "${PKG_LIST[@]}"; do
            pkg_name=$(echo "$pkg_name" | xargs) # Trim whitespace
            FOUND=false

            # Look through all package.json files in the packages directory
            for pkg_dir in packages/*; do
              if [ -f "$pkg_dir/package.json" ]; then
                PKG_JSON_NAME=$(jq -r '.name' "$pkg_dir/package.json")
                if [[ "$PKG_JSON_NAME" == "$pkg_name" ]]; then
                  FOUND=true
                  FOUND_PACKAGES+=("$PKG_JSON_NAME")
                  break
                fi
              fi
            done

            if [ "$FOUND" = false ]; then
              NOT_FOUND_PACKAGES+=("$pkg_name")
            fi
          done

          # Output results
          echo "Found packages:"
          printf "  - %s\n" "${FOUND_PACKAGES[@]}"

          # Error if any packages were not found
          if [ ${#NOT_FOUND_PACKAGES[@]} -gt 0 ]; then
            echo "::error::The following packages were not found:"
            printf "  - %s\n" "${NOT_FOUND_PACKAGES[@]}"
            echo "Please check the package names and try again."
            exit 1
          fi

      - name: üîÑ Update dependabot configuration
        # Update dependabot config for major releases, but not for prereleases
        if: ${{ contains(inputs.release_version, 'major') && !contains(inputs.release_version, 'pre') }}
        shell: bash
        env:
          NEXT_VERSION_BRANCH: ${{ inputs.next_version_branch }}
          CONFIG_DEPENDABOT: '.github/dependabot.yml'
        run: |
          if [ -f "${CONFIG_DEPENDABOT}" ]; then
            echo '::group::Updating the configuration of dependabot'
            # Update the target-branch in dependabot.yml to point to the new feature branch
            yq e "(.. | select(has(\"target-branch\"))
                      | select(.[\"target-branch\"]
                      | test(\"^v[0-9]+$\"))).target-branch = \"${NEXT_VERSION_BRANCH}\"" \
              -i "${CONFIG_DEPENDABOT}"

            if git diff --exit-code --quiet "${CONFIG_DEPENDABOT}"; then
              echo "No changes detected."
              exit 0
            fi

            echo "Update branch name for next version (New value: ${NEXT_VERSION_BRANCH})."
            git diff "${CONFIG_DEPENDABOT}"
            echo '::endgroup::'

            echo '::group::Committing changes'
            git add "${CONFIG_DEPENDABOT}"
            {
              echo "chore: update dependabot.yml"
              echo
              echo "Update branch name for next version (new value: ${NEXT_VERSION_BRANCH})"
              echo "[skip ci]"
            } | git commit -F -
            git show
            git push --no-verify
            echo '::endgroup::'
          else
            echo "Dependabot configuration file not found, skipping update."
          fi

      - name: üîÑ Merge feature branch to main
        if: ${{ contains(inputs.release_version, 'major') && !contains(inputs.release_version, 'pre') && !inputs.dry_run && startsWith(inputs.target_branch, 'feature/') }}
        shell: bash
        run: |
          echo "::group::Merging feature branch to main"

          # Ensure we have the latest main branch
          git fetch origin main

          # Check if we're on a feature branch
          if [[ "${{ inputs.target_branch }}" == feature/* ]]; then
            echo "We are on feature branch ${{ inputs.target_branch }}, preparing to merge to main"

            # Create a temporary branch from main to merge into
            git checkout origin/main -b temp-main-for-merge

            # Set git identity for potential conflict resolution commits
            git config user.email "actions@github.com"
            git config user.name "GitHub Actions"

            # Try to merge the feature branch into the temp branch
            # Using --no-ff to ensure a merge commit is created
            MERGE_MESSAGE="feat: merge ${{ inputs.target_branch }} to main for ${{ inputs.packages }} v${{ inputs.calculated_version }} release [skip ci]"

            if ! git merge --no-ff ${{ inputs.target_branch }} -m "$MERGE_MESSAGE"; then
              echo "::error::Merge conflict detected when merging ${{ inputs.target_branch }} to main"

              # Abort the merge
              git merge --abort

              # Create a detailed error message
              echo "::group::Merge Conflict Details"
              echo "The automated merge from ${{ inputs.target_branch }} to main failed due to conflicts."
              echo "Please resolve these conflicts manually by:"
              echo "1. Creating a PR from ${{ inputs.target_branch }} to main"
              echo "2. Resolving the conflicts in the PR"
              echo "3. Merging the PR"
              echo "4. Then run this release workflow again from the main branch"

              # Try to identify conflicting files to provide more context
              echo "Potential conflicting files:"
              git checkout ${{ inputs.target_branch }}
              FEATURE_FILES=$(git diff --name-only origin/main)
              git checkout origin/main
              MAIN_FILES=$(git diff --name-only ${{ inputs.target_branch }})
              echo "$FEATURE_FILES" | grep -f <(echo "$MAIN_FILES") || echo "Could not determine specific conflicting files"
              echo "::endgroup::"

              # Return to the original branch
              git checkout ${{ inputs.target_branch }}

              # Exit with error
              exit 1
            fi

            # If we get here, the merge was successful
            echo "Successfully merged ${{ inputs.target_branch }} to temp-main-for-merge"

            # We'll push this branch later in the push step

            # Set a flag to indicate successful merge
            echo "MERGE_SUCCESSFUL=true" >> $GITHUB_ENV

            # Return to the original branch for the rest of the release process
            git checkout ${{ inputs.target_branch }}
          else
            echo "Not on a feature branch, skipping merge to main"
          fi

          echo "::endgroup::"

      - name: üöÄ Push Branches
        id: push_tags
        shell: bash
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would push branches"

            # If we would merge a feature branch to main, show what would happen
            if [[ "${{ contains(inputs.release_version, 'major') && !contains(inputs.release_version, 'pre') && startsWith(inputs.target_branch, 'feature/') }}" == "true" ]]; then
              echo "DRY RUN: Would push merged main branch"
            fi
          else
            echo "::group::Git log"
            git log --oneline -n 5
            echo "::endgroup::"

            # If we merged a feature branch to main, push the main branch
            if [[ "${MERGE_SUCCESSFUL}" == "true" ]] && git rev-parse --verify --quiet "temp-main-for-merge" >/dev/null; then
              echo "Pushing merged main branch..."
              git checkout temp-main-for-merge
              git push --no-verify --force-with-lease origin temp-main-for-merge:main
              echo "‚úÖ Successfully pushed merged main branch"

              # Return to the original branch
              git checkout ${{ inputs.target_branch }}
            fi
          fi

      - name: üìã Log changes (dry run only)
        if: ${{ inputs.dry_run }}
        env:
          RELEASE_BRANCH: ${{ inputs.target_branch }}
          PACKAGES: ${{ inputs.packages }}
        run: |
          echo "::group::Release Summary"
          echo "Branch: ${RELEASE_BRANCH}"
          echo "Release type: ${{ inputs.release_version }}"

          if [[ -n "${PACKAGES}" ]]; then
            echo "Packages to be released: ${PACKAGES}"
          else
            echo "Releasing default package"
          fi
          echo "::endgroup::"

          echo "::group::Changes that would be pushed"

          # We already know the remote branch exists from the validation step
          echo "Showing changes from remote ${RELEASE_BRANCH}:"
          git diff "origin/${RELEASE_BRANCH}"

          # If this is a major release from a feature branch, also show the changes that would be merged to main
          if [[ "${{ contains(inputs.release_version, 'major') && !contains(inputs.release_version, 'pre') && startsWith(inputs.target_branch, 'feature/') }}" == "true" ]]; then
            echo -e "\nChanges that would be merged to main:"
            git diff origin/main
          fi

          echo "::endgroup::"
          echo "DRY RUN: No changes were pushed. This is what would have been pushed."
