name: Publish Release

on:
  workflow_call:
    inputs:
      target_branch:
        description: 'Target branch to release from'
        required: true
        type: string
      release_version:
        description: 'Release type (patch, minor, major, prepatch, preminor, premajor, prerelease)'
        required: true
        type: string
      dry_run:
        description: 'Do not touch or write anything. Show the commands.'
        required: true
        default: false
        type: boolean
      branch_type:
        description: 'Branch type (main, feature)'
        required: true
        type: string
      packages:
        description: 'Packages to release (all, specific packages, or a comma-separated list)'
        required: false
        type: string
    secrets:
      github_bot_token:
        description: 'GitHub token for authentication'
        required: true
      npm_token:
        description: 'NPM token for publishing packages'
        required: true
      deploy_key:
        description: 'SSH deploy key for pushing to the repository'
        required: true
    outputs:
      release_tag:
        description: 'The created release tag'
        value: ${{ jobs.publish.outputs.release_tag }}

jobs:
  publish:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.push_tags.outputs.release_tag }}
    steps:
      - name: ‚öñÔ∏è Define target branch
        id: define
        env:
          TARGET_BRANCH: ${{ inputs.target_branch }}
          IS_MAJOR: ${{ contains(inputs.release_version, 'major') }}
          IS_PRE_RELEASE: ${{ contains(inputs.release_version, 'pre') }}
        run: |
          if [ "${IS_MAJOR}" == 'true' -a "${IS_PRE_RELEASE}" == 'false' ]; then
            echo "target_branch=main"
            echo "target_branch=main" >>"${GITHUB_OUTPUT}"
          else
            echo "target_branch=${TARGET_BRANCH}"
            echo "target_branch=${TARGET_BRANCH}" >>"${GITHUB_OUTPUT}"
          fi

      - name: üë∑ Checkout branch for tagging
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.deploy_key }}
          # For major releases, we tag on main
          # For all other releases, we tag on the target branch
          ref: ${{steps.define.outputs.target_branch }}
          fetch-depth: 0 # Full history needed for versioning

      - name: üõ†Ô∏è Setup workspace
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: '20'

      - name: üèóÔ∏è Build packages
        uses: ./.github/workflows/actions/build-verify

      - name: üì¶ Configure NPM registry
        shell: bash
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would configure NPM registry for publishing"
          else
            # Set up NPM authentication for publishing
            pnpm set registry "https://registry.npmjs.org/"
            pnpm set //registry.npmjs.org/:_authToken ${{ secrets.npm_token }}
            pnpm whoami
          fi

      - name: üè∑Ô∏è Create Release and Tags
        # Uses turbo-version to bump versions and create git tags
        run: |
          # Ensure we're in the workspace root where version.config.json is located
          cd "$GITHUB_WORKSPACE"

          # Function to get package version
          get_package_version() {
            local pkg=$1
            local default_pkg=${2:-"core"}

            if [[ -f "packages/$pkg/package.json" ]]; then
              jq -r '.version' "packages/$pkg/package.json"
            else
              # If requested package doesn't exist, use the default package
              echo "::warning::Package $pkg not found, using $default_pkg as reference"
              jq -r '.version' "packages/$default_pkg/package.json"
            fi
          }

          # Function to get the version based on package selection
          get_version_for_selection() {
            local selection=$1

            if [[ "$selection" == "all" ]]; then
              get_package_version "core"
            elif [[ "$selection" == "electron" ]]; then
              get_package_version "electron"
            elif [[ "$selection" == "tauri" ]]; then
              get_package_version "tauri"
            elif [[ "$selection" == "tauri-v1" ]]; then
              get_package_version "tauri-v1"
            else
              # For custom package list, use the first valid package or core as fallback
              local found_valid=false
              IFS=',' read -ra PKG_LIST <<< "$selection"
              for pkg in "${PKG_LIST[@]}"; do
                pkg=$(echo "$pkg" | xargs) # Trim whitespace
                if [[ -f "packages/$pkg/package.json" ]]; then
                  get_package_version "$pkg"
                  found_valid=true
                  break
                fi
              done

              if [[ "$found_valid" != "true" ]]; then
                echo "::warning::No valid packages found in selection, using core as reference"
                get_package_version "core"
              fi
            fi
          }

          # Use 'latest' tag for all releases
          TAG="latest"

          # Use 'next' tag for pre-releases
          if [[ "${{ inputs.release_version }}" =~ (beta|alpha|rc|pre) ]]; then
            TAG="next"
          fi

          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            # Get the current version
            CURRENT_VERSION=$(get_version_for_selection "${{ inputs.packages }}")
            echo "Current version: $CURRENT_VERSION"

            # Run turbo-version to calculate the next version
            # This will update package.json files but won't create git tags or push anything
            echo "Running turbo-version to calculate the next version..."
            pnpm turbo-version -b ${{ inputs.release_version }}

            # Get the new version that was calculated
            NEW_VERSION=$(get_version_for_selection "${{ inputs.packages }}")
            echo "Next version would be: $NEW_VERSION"

            # Show which files would be modified
            echo "Files that would be modified:"
            git diff --name-only

            # Show the actual changes that would be made
            echo "Changes that would be made:"
            git diff --color

            echo "DRY RUN: Would create release and tags with command: pnpm turbo-version -b ${{ inputs.release_version }}"
            echo "DRY RUN: Would bump version from $CURRENT_VERSION to $NEW_VERSION"
            echo "DRY RUN: Would create git tag v$NEW_VERSION"

            # Reset any changes made during the dry run
            git reset --hard HEAD
          else
            pnpm turbo-version -b ${{ inputs.release_version }}

            # Store the new version for later use based on the selected package
            NEW_VERSION=$(get_version_for_selection "${{ inputs.packages }}")
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          fi

      - name: üì¢ Publish to NPM
        shell: bash
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would publish packages to NPM with tag '$TAG'"

            # Get package versions based on inputs.packages
            CORE_VERSION=$(get_package_version "core")
            TYPES_VERSION=$CORE_VERSION

            if [[ "${{ inputs.packages }}" == "all" ]]; then
              # For "all", use core for core packages, and main package versions for main packages
              ELECTRON_VERSION=$(get_package_version "electron")
              TAURI_VERSION=$(get_package_version "tauri")
              TAURIV1_VERSION=$(get_package_version "tauri-v1")

              echo "Would publish all packages:"
              echo "  - @zubridge/core@$CORE_VERSION"
              echo "  - @zubridge/types@$TYPES_VERSION"
              echo "  - @zubridge/electron@$ELECTRON_VERSION"
              echo "  - @zubridge/tauri@$TAURI_VERSION"
              echo "  - @zubridge/tauri-v1@$TAURIV1_VERSION"
              echo "DRY RUN: Would run command: pnpx tsx scripts/publish.ts --tag=$TAG"
            elif [[ "${{ inputs.packages }}" == "electron" ]]; then
              # For specific packages, use the same version for core/types and the main package
              ELECTRON_VERSION=$(get_package_version "electron")

              echo "Would publish custom packages:"
              echo "  - @zubridge/core@$CORE_VERSION"
              echo "  - @zubridge/types@$TYPES_VERSION"
              echo "  - @zubridge/electron@$ELECTRON_VERSION"
              echo "DRY RUN: Would run command: pnpx tsx scripts/publish.ts --tag=$TAG --filter=@zubridge/core --filter=@zubridge/types --filter=@zubridge/electron"
            elif [[ "${{ inputs.packages }}" == "tauri" ]]; then
              TAURI_VERSION=$(get_package_version "tauri")

              echo "Would publish custom packages:"
              echo "  - @zubridge/core@$CORE_VERSION"
              echo "  - @zubridge/types@$TYPES_VERSION"
              echo "  - @zubridge/tauri@$TAURI_VERSION"
              echo "DRY RUN: Would run command: pnpx tsx scripts/publish.ts --tag=$TAG --filter=@zubridge/core --filter=@zubridge/types --filter=@zubridge/tauri"
            elif [[ "${{ inputs.packages }}" == "tauri-v1" ]]; then
              TAURIV1_VERSION=$(get_package_version "tauri-v1")

              echo "Would publish custom packages:"
              echo "  - @zubridge/core@$CORE_VERSION"
              echo "  - @zubridge/types@$TYPES_VERSION"
              echo "  - @zubridge/tauri-v1@$TAURIV1_VERSION"
              echo "DRY RUN: Would run command: pnpx tsx scripts/publish.ts --tag=$TAG --filter=@zubridge/core --filter=@zubridge/types --filter=@zubridge/tauri-v1"
            else
              # For custom package selection
              echo "Would publish custom packages:"
              echo "  - @zubridge/core@$CORE_VERSION"
              echo "  - @zubridge/types@$TYPES_VERSION"

              # Build the filter command
              FILTER_CMD=" --filter=@zubridge/core --filter=@zubridge/types"
              IFS=',' read -ra PKG_LIST <<< "${{ inputs.packages }}"
              for pkg in "${PKG_LIST[@]}"; do
                pkg=$(echo "$pkg" | xargs) # Trim whitespace
                if [[ -f "packages/$pkg/package.json" ]]; then
                  PKG_VERSION=$(get_package_version "$pkg")
                  echo "  - @zubridge/$pkg@$PKG_VERSION"
                  FILTER_CMD="$FILTER_CMD --filter=@zubridge/$pkg"
                else
                  echo "::error::Package $pkg not found in packages directory. Aborting publish."
                  exit 1
                fi
              done

              echo "DRY RUN: Would run command: pnpx tsx scripts/publish.ts --tag=$TAG $FILTER_CMD"
            fi
          else
            # Actual publish
            if [[ "${{ inputs.packages }}" == "all" ]]; then
              pnpx tsx scripts/publish.ts --tag=$TAG
            else
              # Build filter command based on packages input
              # Always include core and types
              FILTER_CMD=" --filter=@zubridge/core --filter=@zubridge/types"

              if [[ "${{ inputs.packages }}" == "electron" ]]; then
                FILTER_CMD="$FILTER_CMD --filter=@zubridge/electron"
              elif [[ "${{ inputs.packages }}" == "tauri" ]]; then
                FILTER_CMD="$FILTER_CMD --filter=@zubridge/tauri"
              elif [[ "${{ inputs.packages }}" == "tauri-v1" ]]; then
                FILTER_CMD="$FILTER_CMD --filter=@zubridge/tauri-v1"
              else
                # Handle custom package list
                IFS=',' read -ra PKG_LIST <<< "${{ inputs.packages }}"
                for pkg in "${PKG_LIST[@]}"; do
                  pkg=$(echo "$pkg" | xargs) # Trim whitespace
                  if [[ -f "packages/$pkg/package.json" ]]; then
                    FILTER_CMD="$FILTER_CMD --filter=@zubridge/$pkg"
                  else
                    echo "::error::Package $pkg not found in packages directory. Aborting publish."
                    exit 1
                  fi
                done
              fi

              pnpx tsx scripts/publish.ts --tag=$TAG $FILTER_CMD
            fi
          fi

      # Verify the published packages
      - name: üîç Verify published packages
        shell: bash
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would verify the following packages were published successfully:"
            PACKAGES=()
            while IFS= read -r pkg_json; do
              if [[ "$pkg_json" != *"node_modules"* ]]; then
                PKG_NAME=$(jq -r '.name' "$pkg_json")
                if [[ "$PKG_NAME" == @zubridge/* ]]; then
                  echo "  - $PKG_NAME@${NEW_VERSION}"
                  PACKAGES+=("$PKG_NAME")
                fi
              fi
            done < <(find packages -name "package.json" -maxdepth 2 -mindepth 2)

            echo "DRY RUN: Would wait for NPM to index the packages"
            echo "DRY RUN: Would check each package exists on NPM with the expected version"
          else
            echo "::group::Verifying published packages"
            # Get the version that was just published based on the selected package
            VERSION=$(get_version_for_selection "${{ inputs.packages }}")
            echo "Published version: $VERSION"
            # Dynamically get package names from package.json files
            PACKAGES=()
            while IFS= read -r pkg_json; do
              if [[ "$pkg_json" != *"node_modules"* ]]; then
                PKG_NAME=$(jq -r '.name' "$pkg_json")
                if [[ "$PKG_NAME" == @zubridge/* ]]; then
                  PACKAGES+=("$PKG_NAME")
                fi
              fi
            done < <(find packages -name "package.json" -maxdepth 2 -mindepth 2)
            echo "Found packages to verify: ${PACKAGES[*]}"
            # Wait a moment for NPM to index the packages
            echo "Waiting for NPM to index the packages..."
            sleep 10
            # Verify each package was published correctly
            for pkg in "${PACKAGES[@]}"; do
              echo "Verifying $pkg@$VERSION..."
              # Check if the package exists on NPM with the expected version
              if ! npm view "$pkg@$VERSION" version &>/dev/null; then
                echo "::error::Package $pkg@$VERSION not found on NPM"
                exit 1
              fi
              echo "‚úÖ $pkg@$VERSION verified"
            done
            echo "All packages verified successfully"
            echo "::endgroup::"
          fi

      - name: üöÄ Push Tags and Commits
        id: push_tags
        shell: bash
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            RELEASE_TAG="v${NEW_VERSION}"
            echo "DRY RUN: Would push tags and commits to remote repository"
            echo "DRY RUN: Would push tag $RELEASE_TAG"
            echo "DRY RUN: Would push branch ${{ inputs.target_branch }}"

            # For dry run, set the calculated release tag for downstream jobs
            echo "release_tag=$RELEASE_TAG" >>"${GITHUB_OUTPUT}"
            echo "DRY RUN: Set release_tag output to $RELEASE_TAG for downstream jobs"
          else
            echo "Git log:"
            git log --oneline -n 5
            # Get the most recent tag (the one we just created)
            RELEASE_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
            echo "Release tag: ${RELEASE_TAG}"
            echo "Pushing tags and commits..."
            # Push tags and commits without running the pre-push hook
            git push --tags --no-verify && git push --no-verify
            # Pass the release tag to the next step
            echo "release_tag=${RELEASE_TAG}" >>"${GITHUB_OUTPUT}"
          fi

      - name: üìù Create GitHub Release
        if: ${{ !inputs.dry_run }}
        uses: softprops/action-gh-release@v2
        with:
          draft: true # Create as draft for manual review
          generate_release_notes: true
          prerelease: ${{ contains(inputs.release_version, 'pre') }}
          repository: ${{ github.repository }}
          tag_name: ${{ steps.push_tags.outputs.release_tag }}
          token: ${{ secrets.github_bot_token }}

      - name: üìã Log GitHub Release (dry run only)
        if: ${{ inputs.dry_run }}
        run: |
          RELEASE_TAG="v${NEW_VERSION}"
          echo "DRY RUN: Would create a GitHub release with:"
          echo "  - Tag name: $RELEASE_TAG"
          echo "  - Draft: true"
          echo "  - Generate release notes: true"
          echo "  - Prerelease: ${{ contains(inputs.release_version, 'pre') }}"
          echo "  - Repository: ${{ github.repository }}"
          echo "  - Title: Release $RELEASE_TAG"
