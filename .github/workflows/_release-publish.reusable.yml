name: Publish Release

on:
  workflow_call:
    inputs:
      target_branch:
        description: 'Target branch to release from'
        required: true
        type: string
      release_version:
        description: 'Release type (patch, minor, major, prepatch, preminor, premajor, prerelease)'
        required: true
        type: string
      dry_run:
        description: 'Do not touch or write anything. Show the commands.'
        required: true
        default: false
        type: boolean
      branch_type:
        description: 'Branch type (main, feature)'
        required: true
        type: string
      packages:
        description: 'Packages to release (all, specific packages, or a comma-separated list)'
        required: false
        type: string
    secrets:
      github_bot_token:
        description: 'GitHub token for authentication'
        required: true
      npm_token:
        description: 'NPM token for publishing packages'
        required: true
      deploy_key:
        description: 'SSH deploy key for pushing to the repository'
        required: true
    outputs:
      release_tag:
        description: 'The created release tag'
        value: ${{ jobs.publish.outputs.release_tag }}

jobs:
  publish:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.push_tags.outputs.release_tag }}
    steps:
      - name: ‚öñÔ∏è Define target branch
        id: define
        env:
          TARGET_BRANCH: ${{ inputs.target_branch }}
          IS_MAJOR: ${{ contains(inputs.release_version, 'major') }}
          IS_PRE_RELEASE: ${{ contains(inputs.release_version, 'pre') }}
        run: |
          if [ "${IS_MAJOR}" == 'true' -a "${IS_PRE_RELEASE}" == 'false' ]; then
            echo "target_branch=main"
            echo "target_branch=main" >>"${GITHUB_OUTPUT}"
          else
            echo "target_branch=${TARGET_BRANCH}"
            echo "target_branch=${TARGET_BRANCH}" >>"${GITHUB_OUTPUT}"
          fi

      - name: üë∑ Checkout branch for tagging
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.deploy_key }}
          # For major releases, we tag on main
          # For all other releases, we tag on the target branch
          ref: ${{steps.define.outputs.target_branch }}
          fetch-depth: 0 # Full history needed for versioning

      - name: üõ†Ô∏è Setup workspace
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: '20'

      - name: üèóÔ∏è Build packages
        uses: ./.github/workflows/actions/build-verify

      - name: üì¶ Configure NPM registry
        shell: bash
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would configure NPM registry for publishing"
          else
            # Set up NPM authentication for publishing
            pnpm set registry "https://registry.npmjs.org/"
            pnpm set //registry.npmjs.org/:_authToken ${{ secrets.npm_token }}
            pnpm whoami
          fi

      - name: üè∑Ô∏è Create Release and Tags
        # Uses turbo-version to bump versions and create git tags
        run: |
          # Ensure we're in the workspace root where version.config.json is located
          cd "$GITHUB_WORKSPACE"

          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            # Get the current version
            CURRENT_VERSION=$(jq -r '.version' packages/electron/package.json)
            echo "Current version: $CURRENT_VERSION"

            # Run turbo-version to calculate the next version
            # This will update package.json files but won't create git tags or push anything
            echo "Running turbo-version to calculate the next version..."
            pnpm turbo-version -b ${{ inputs.release_version }}

            # Get the new version that was calculated
            NEW_VERSION=$(jq -r '.version' packages/electron/package.json)
            echo "Next version would be: $NEW_VERSION"

            # Show what files were changed
            echo "Files that would be modified:"
            git diff --name-only

            # Show the actual changes
            echo "Changes that would be made:"
            git diff --color

            echo "DRY RUN: Would create release and tags with command: pnpm turbo-version -b ${{ inputs.release_version }}"
            echo "DRY RUN: Would bump version from $CURRENT_VERSION to $NEW_VERSION"
            echo "DRY RUN: Would create git tag v$NEW_VERSION"

            # Store the new version for later use
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

            # Reset changes made by turbo-version since this is a dry run
            git reset --hard HEAD
          else
            pnpm turbo-version -b ${{ inputs.release_version }}
            # Store the new version for later use
            NEW_VERSION=$(jq -r '.version' packages/electron/package.json)
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          fi

      - name: üì¢ Publish to NPM
        run: |
          # Set NPM tag based on version
          if [[ "${{ inputs.release_version }}" =~ (beta|alpha|rc) ]]; then
            NPM_TAG="next"
          else
            NPM_TAG="latest"
          fi
          echo "Using NPM tag: $NPM_TAG"

          # Dry run for publish
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would publish packages to NPM with tag '$NPM_TAG'"

            # Get current version of core and main packages
            CORE_VERSION=$(jq -r '.version' packages/core/package.json)
            MAIN_VERSION=$(jq -r '.version' packages/${{ inputs.packages }}/package.json)

            if [[ "${{ inputs.packages }}" == "all" ]]; then
              echo "Would publish all packages:"
              echo "  - @zubridge/core@$CORE_VERSION"
              echo "  - @zubridge/types@$CORE_VERSION"
              echo "  - @zubridge/electron@$MAIN_VERSION"
              echo "  - @zubridge/tauri@$MAIN_VERSION"
              echo "  - @zubridge/tauri-v1@$MAIN_VERSION"
              echo "DRY RUN: Would run command: pnpx tsx scripts/publish.ts --otp=$OTP --tag=$NPM_TAG"
            elif [[ "${{ inputs.packages }}" == "electron" ]]; then
              echo "Would publish custom packages:"
              echo "  - @zubridge/core@$CORE_VERSION"
              echo "  - @zubridge/types@$CORE_VERSION"
              echo "  - @zubridge/electron@$MAIN_VERSION"
              echo "DRY RUN: Would run command: pnpx tsx scripts/publish.ts --otp=$OTP --tag=$NPM_TAG --filter=@zubridge/electron"
            elif [[ "${{ inputs.packages }}" == "tauri" ]]; then
              echo "Would publish custom packages:"
              echo "  - @zubridge/core@$CORE_VERSION"
              echo "  - @zubridge/types@$CORE_VERSION"
              echo "  - @zubridge/tauri@$MAIN_VERSION"
              echo "DRY RUN: Would run command: pnpx tsx scripts/publish.ts --otp=$OTP --tag=$NPM_TAG --filter=@zubridge/tauri"
            elif [[ "${{ inputs.packages }}" == "tauri-v1" ]]; then
              echo "Would publish custom packages:"
              echo "  - @zubridge/core@$CORE_VERSION"
              echo "  - @zubridge/types@$CORE_VERSION"
              echo "  - @zubridge/tauri-v1@$MAIN_VERSION"
              echo "DRY RUN: Would run command: pnpx tsx scripts/publish.ts --otp=$OTP --tag=$NPM_TAG --filter=@zubridge/tauri-v1"
            else
              # For custom package selection
              echo "Would publish custom packages:"
              echo "  - @zubridge/core@$CORE_VERSION"
              echo "  - @zubridge/types@$CORE_VERSION"
              for pkg in ${{ inputs.packages }}; do
                PKG_VERSION=$(jq -r '.version' packages/$pkg/package.json)
                echo "  - @zubridge/$pkg@$PKG_VERSION"
              done
              echo "DRY RUN: Would run command: pnpx tsx scripts/publish.ts --otp=$OTP --tag=$NPM_TAG --filter=@zubridge/{${{ inputs.packages }}}"
            fi
          else
            # Actual publish
            if [[ "${{ inputs.packages }}" == "all" ]]; then
              pnpx tsx scripts/publish.ts --otp=$OTP --tag=$NPM_TAG
            else
              pnpx tsx scripts/publish.ts --otp=$OTP --tag=$NPM_TAG --filter=@zubridge/{${{ inputs.packages }}}
            fi
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          OTP: ${{ inputs.otp }}

      - name: Verify NPM Publication
        run: |
          # Function to check if a package exists on NPM
          check_package() {
            local pkg=$1
            local version=$2
            if npm view $pkg@$version version > /dev/null 2>&1; then
              echo "‚úÖ $pkg@$version exists on NPM"
              return 0
            else
              echo "‚ùå $pkg@$version not found on NPM"
              return 1
            fi
          }

          # Get current versions
          CORE_VERSION=$(jq -r '.version' packages/core/package.json)
          MAIN_VERSION=$(jq -r '.version' packages/${{ inputs.packages }}/package.json)

          # Dry run for verification
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would verify the following packages were published successfully:"
            echo "  - @zubridge/core@$CORE_VERSION"
            echo "  - @zubridge/types@$CORE_VERSION"

            if [[ "${{ inputs.packages }}" == "all" ]]; then
              echo "  - @zubridge/electron@$MAIN_VERSION"
              echo "  - @zubridge/tauri@$MAIN_VERSION"
              echo "  - @zubridge/tauri-v1@$MAIN_VERSION"
            elif [[ "${{ inputs.packages }}" == "electron" ]]; then
              echo "  - @zubridge/electron@$MAIN_VERSION"
            elif [[ "${{ inputs.packages }}" == "tauri" ]]; then
              echo "  - @zubridge/tauri@$MAIN_VERSION"
            elif [[ "${{ inputs.packages }}" == "tauri-v1" ]]; then
              echo "  - @zubridge/tauri-v1@$MAIN_VERSION"
            else
              # For custom package selection
              for pkg in ${{ inputs.packages }}; do
                PKG_VERSION=$(jq -r '.version' packages/$pkg/package.json)
                echo "  - @zubridge/$pkg@$PKG_VERSION"
              done
            fi

            echo "DRY RUN: Would wait for NPM to index the packages"
            echo "DRY RUN: Would check each package exists on NPM with the expected version"
          else
            # Wait for NPM to index the packages
            echo "Waiting for NPM to index the packages..."
            sleep 10

            # Check core and types packages
            check_package "@zubridge/core" "$CORE_VERSION" || exit 1
            check_package "@zubridge/types" "$CORE_VERSION" || exit 1

            # Check main packages based on selection
            if [[ "${{ inputs.packages }}" == "all" ]]; then
              check_package "@zubridge/electron" "$MAIN_VERSION" || exit 1
              check_package "@zubridge/tauri" "$MAIN_VERSION" || exit 1
              check_package "@zubridge/tauri-v1" "$MAIN_VERSION" || exit 1
            elif [[ "${{ inputs.packages }}" == "electron" ]]; then
              check_package "@zubridge/electron" "$MAIN_VERSION" || exit 1
            elif [[ "${{ inputs.packages }}" == "tauri" ]]; then
              check_package "@zubridge/tauri" "$MAIN_VERSION" || exit 1
            elif [[ "${{ inputs.packages }}" == "tauri-v1" ]]; then
              check_package "@zubridge/tauri-v1" "$MAIN_VERSION" || exit 1
            else
              # For custom package selection
              for pkg in ${{ inputs.packages }}; do
                PKG_VERSION=$(jq -r '.version' packages/$pkg/package.json)
                check_package "@zubridge/$pkg" "$PKG_VERSION" || exit 1
              done
            fi
          fi

      - name: üöÄ Push Tags and Commits
        id: push_tags
        shell: bash
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            RELEASE_TAG="v${NEW_VERSION}"
            echo "DRY RUN: Would push tags and commits to remote repository"
            echo "DRY RUN: Would push tag $RELEASE_TAG"
            echo "DRY RUN: Would push branch ${{ inputs.target_branch }}"

            # For dry run, set the calculated release tag for downstream jobs
            echo "release_tag=$RELEASE_TAG" >>"${GITHUB_OUTPUT}"
            echo "DRY RUN: Set release_tag output to $RELEASE_TAG for downstream jobs"
          else
            echo "Git log:"
            git log --oneline -n 5
            # Get the most recent tag (the one we just created)
            RELEASE_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
            echo "Release tag: ${RELEASE_TAG}"
            echo "Pushing tags and commits..."
            # Push tags and commits without running the pre-push hook
            git push --tags --no-verify && git push --no-verify
            # Pass the release tag to the next step
            echo "release_tag=${RELEASE_TAG}" >>"${GITHUB_OUTPUT}"
          fi

      - name: üìù Create GitHub Release
        if: ${{ !inputs.dry_run }}
        uses: softprops/action-gh-release@v2
        with:
          draft: true # Create as draft for manual review
          generate_release_notes: true
          prerelease: ${{ contains(inputs.release_version, 'pre') }}
          repository: ${{ github.repository }}
          tag_name: ${{ steps.push_tags.outputs.release_tag }}
          token: ${{ secrets.github_bot_token }}

      - name: üìã Log GitHub Release (dry run only)
        if: ${{ inputs.dry_run }}
        run: |
          RELEASE_TAG="v${NEW_VERSION}"
          echo "DRY RUN: Would create a GitHub release with:"
          echo "  - Tag name: $RELEASE_TAG"
          echo "  - Draft: true"
          echo "  - Generate release notes: true"
          echo "  - Prerelease: ${{ contains(inputs.release_version, 'pre') }}"
          echo "  - Repository: ${{ github.repository }}"
          echo "  - Title: Release $RELEASE_TAG"
