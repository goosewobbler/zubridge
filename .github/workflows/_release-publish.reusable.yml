name: Publish Release

on:
  workflow_call:
    inputs:
      target_branch:
        description: 'Target branch to release from'
        required: true
        type: string
      release_version:
        description: 'Release type (patch, minor, major, prepatch, preminor, premajor, prerelease)'
        required: true
        type: string
      dry_run:
        description: 'Do not touch or write anything. Show the commands.'
        required: true
        default: false
        type: boolean
      branch_type:
        description: 'Branch type (main, feature)'
        required: true
        type: string
      packages:
        description: 'Packages to release (all, specific packages, or a comma-separated list)'
        required: false
        type: string
    secrets:
      github_bot_token:
        description: 'GitHub token for authentication'
        required: true
      npm_token:
        description: 'NPM token for publishing packages'
        required: true
      deploy_key:
        description: 'SSH deploy key for pushing to the repository'
        required: true
    outputs:
      release_tag:
        description: 'The created release tag'
        value: ${{ jobs.publish.outputs.release_tag }}

jobs:
  publish:
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.push_tags.outputs.release_tag }}
    steps:
      - name: üë∑ Checkout target branch for release
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.deploy_key }}
          # Always checkout the actual target branch passed from calculate job
          ref: ${{ inputs.target_branch }}
          fetch-depth: 0 # Full history needed for versioning

      - name: üõ†Ô∏è Setup workspace
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: '20'

      - name: üèóÔ∏è Build packages
        uses: ./.github/workflows/actions/build-verify

      - name: üì¶ Configure NPM registry
        shell: bash
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would configure NPM registry for publishing"
          else
            # Set up NPM authentication for publishing
            pnpm set registry "https://registry.npmjs.org/"
            pnpm set //registry.npmjs.org/:_authToken ${{ secrets.npm_token }}
            pnpm whoami
          fi

      - name: üîÑ Calculate version & create tag
        id: versioning
        run: pnpx tsx .github/workflows/scripts/calculate-version.ts
        env:
          # Pass inputs as environment variables, prefixed with INPUT_
          INPUT_PACKAGES: ${{ inputs.packages }}
          INPUT_RELEASE_VERSION: ${{ inputs.release_version }}
          INPUT_DRY_RUN: ${{ inputs.dry_run }}
          # GITHUB_WORKSPACE is automatically available

      - name: üì¢ Publish to NPM
        shell: bash
        run: |
          # Get the new version from the previous step's output
          NEW_VERSION="${{ steps.versioning.outputs.new_version }}"
          if [[ -z "$NEW_VERSION" ]]; then
            echo "::error::Failed to get NEW_VERSION from the versioning step."
            exit 1
          fi
          echo "Retrieved NEW_VERSION: $NEW_VERSION"

          # Get NPM tag based on version
          if [[ "$NEW_VERSION" =~ (beta|alpha|rc|pre) ]]; then
            TAG="next"
          else
            TAG="latest"
          fi
          echo "Using NPM tag: $TAG"

          # For dry run, just echo what would happen
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "DRY RUN: Would publish packages to NPM with tag '$TAG'"

            # Helper function to check package existence (handles scope)
            check_pkg_exists() {
              local raw_pkg_name=$1
              local pkgDirName=$(echo "$raw_pkg_name" | sed 's#^@zubridge/##') # Renamed variable
              if [[ -f "packages/$pkgDirName/package.json" ]]; then
                return 0 # Exists
              else
                return 1 # Doesn't exist
              fi
            }

            if [[ "${{ inputs.packages }}" == "all" ]]; then
              echo "Would publish all packages with tag $TAG"
              for pkg_raw in "${PKG_LIST[@]}"; do
                pkg_raw=$(echo "$pkg_raw" | xargs) # Trim whitespace
                if check_pkg_exists "$pkg_raw"; then
                   # Get dir name again for logging (or pass from check_pkg_exists? Simpler to redo)
                   local pkgDirName=$(echo "$pkg_raw" | sed 's#^@zubridge/##') # Renamed variable
                   echo "Would publish $pkgDirName package with tag $TAG"
                   hasPublishedPackages=true
                else
                   local pkgDirName=$(echo "$pkg_raw" | sed 's#^@zubridge/##') # Get dir name for path in message
                   # Standardized warning/error format
                   echo "::warning::[DRY RUN] Package $pkg_raw (path: packages/$pkgDirName) not found in packages directory."
                fi
              done
            elif [[ "${{ inputs.packages }}" == "electron" ]] || [[ "${{ inputs.packages }}" == "tauri" ]]; then
              # Handle simple names like 'electron'
              if check_pkg_exists "${{ inputs.packages }}"; then
                 echo "Would publish ${{ inputs.packages }} package with tag $TAG"
              else
                 echo "DRY RUN: Warning - Package ${{ inputs.packages }} not found in packages directory"
              fi
            else
              # For custom package list (potentially scoped)
              IFS=',' read -ra PKG_LIST <<< "${{ inputs.packages }}"
              hasPublishedPackages=false
              for input_pkg_name in "${PKG_LIST[@]}"; do # Changed variable name here
                input_pkg_name=$(echo "$input_pkg_name" | xargs) # Trim whitespace
                if check_pkg_exists "$input_pkg_name"; then # Use consistent variable
                   # Get dir name again for logging
                   pkgDirName=$(echo "$input_pkg_name" | sed 's#^@zubridge/##')
                   echo "Would publish $pkgDirName package with tag $TAG"
                   hasPublishedPackages=true
                else
                   pkgDirName=$(echo "$input_pkg_name" | sed 's#^@zubridge/##') # Use consistent variable
                   # Standardized warning/error format
                   echo "::warning::[DRY RUN] Package $input_pkg_name (path: packages/$pkgDirName) not found in packages directory."
                fi
              done
              # Only mention core/types if we were publishing *something*
              if [ "$hasPublishedPackages" = true ]; then
                echo "DRY RUN: Would publish core and types dependencies"
              fi
            fi
            exit 0
          fi

          # Actual publish
          if [[ "${{ inputs.packages }}" == "all" ]]; then
            pnpx tsx scripts/publish.ts --tag=$TAG
          else
            # Build filter command based on packages input
            FILTER_CMD=""

            if [[ "${{ inputs.packages }}" == "electron" ]]; then
              FILTER_CMD="--filter=@zubridge/electron"
            elif [[ "${{ inputs.packages }}" == "tauri" ]]; then
              FILTER_CMD="--filter=@zubridge/tauri"
            else
              # Handle custom package list / specific package
              IFS=',' read -ra PKG_LIST <<< "${{ inputs.packages }}"
              for input_pkg_name in "${PKG_LIST[@]}"; do
                input_pkg_name=$(echo "$input_pkg_name" | xargs) # Trim whitespace
                pkgDirName=$(echo "$input_pkg_name" | sed 's#^@zubridge/##') # Renamed variable

                # Check if the package exists locally using the dir name
                if [[ -f "packages/$pkgDirName/package.json" ]]; then
                  # Read the actual scoped name from the package.json
                  actual_pkg_name=$(jq -r '.name' "packages/$pkgDirName/package.json")
                  if [[ -z "$actual_pkg_name" ]] || [[ "$actual_pkg_name" == "null" ]]; then
                      echo "::error::Could not read package name from packages/$pkgDirName/package.json. Aborting publish."
                      exit 1
                  fi
                  # Use the actual scoped name for the filter
                  FILTER_CMD="$FILTER_CMD --filter=$actual_pkg_name"
                else
                  echo "::error::Package $input_pkg_name (path: packages/$pkgDirName) not found in packages directory. Aborting publish."
                  exit 1
                fi
              done
            fi

            # Always include types dependencies
            FILTER_CMD="$FILTER_CMD --filter=@zubridge/types"

            pnpx tsx scripts/publish.ts --tag=$TAG $FILTER_CMD
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          # Pass the new version needed by the publish script (if it reads env vars)
          # Or preferably, modify publish.ts to accept version as an argument
          NEW_VERSION: ${{ steps.versioning.outputs.new_version }}

      - name: üîç Verify published packages
        shell: bash
        run: bash .github/workflows/scripts/verify-published.sh
        env:
          # Pass necessary variables to the script environment
          INPUT_PACKAGES: ${{ inputs.packages }}
          INPUT_DRY_RUN: ${{ inputs.dry_run }}
          NEW_VERSION: ${{ steps.versioning.outputs.new_version }}
          # GITHUB_WORKSPACE is automatically available

      - name: üöÄ Push Tags and Commits
        id: push_tags
        shell: bash
        run: |
          # Get the new version from the versioning step's output and sanitize it
          NEW_VERSION_RAW="${{ steps.versioning.outputs.new_version }}"
          NEW_VERSION=$(echo "$NEW_VERSION_RAW" | xargs)

          if [[ -z "$NEW_VERSION" ]]; then
             echo "::error::Failed to get NEW_VERSION from the versioning step (Raw: '$NEW_VERSION_RAW')."
             exit 1
          fi
          echo "Using version for tagging: $NEW_VERSION"

          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            RELEASE_TAG="v${NEW_VERSION}"
            echo "DRY RUN: Would create git tag $RELEASE_TAG locally"
            echo "DRY RUN: Would push tags and commits to remote repository"
            echo "DRY RUN: Would push tag $RELEASE_TAG"
            echo "DRY RUN: Would push branch ${{ inputs.target_branch }}"

            # For dry run, set the calculated release tag for downstream jobs
            echo "release_tag=$RELEASE_TAG" >>"${GITHUB_OUTPUT}"
            echo "DRY RUN: Set release_tag output to $RELEASE_TAG for downstream jobs"
          else
            # Construct the tag name
            RELEASE_TAG="v${NEW_VERSION}"

            # Check if tag already exists before creating
            if git rev-parse "$RELEASE_TAG" >/dev/null 2>&1; then
                echo "Git tag ${RELEASE_TAG} already exists."
            else
                echo "Creating git tag: ${RELEASE_TAG}"
                # Explicitly create the tag locally
                git tag "$RELEASE_TAG"
                # Optional: Verify tag creation
                git describe --tags --exact-match "$RELEASE_TAG"
            fi

            echo "Git log before push:"
            git log --oneline -n 5
            echo "Pushing tags and commits..."
            # Push tags (including the one just created) and commits
            git push --tags --no-verify && git push origin "${{ inputs.target_branch }}" --no-verify
            # Pass the release tag to the next step
            echo "release_tag=${RELEASE_TAG}" >>"${GITHUB_OUTPUT}"
            echo "Successfully pushed and set release_tag output to $RELEASE_TAG"
          fi

      - name: üìù Create GitHub Release
        if: ${{ !inputs.dry_run }}
        uses: softprops/action-gh-release@v2
        with:
          draft: true # Create as draft for manual review
          generate_release_notes: true
          prerelease: ${{ contains(inputs.release_version, 'pre') }}
          repository: ${{ github.repository }}
          tag_name: ${{ steps.push_tags.outputs.release_tag }}
          token: ${{ secrets.github_bot_token }}

      - name: üìã Log GitHub Release (dry run only)
        if: ${{ inputs.dry_run }}
        run: |
          # Get the new version from the versioning step's output and sanitize it
          NEW_VERSION_RAW="${{ steps.versioning.outputs.new_version }}"
          NEW_VERSION=$(echo "$NEW_VERSION_RAW" | xargs)

          if [[ -z "$NEW_VERSION" ]]; then
             echo "::error::Failed to get NEW_VERSION from the versioning step for logging (Raw: '$NEW_VERSION_RAW')."
             exit 1 # Fail if version is missing
          fi

          # Re-introduce RELEASE_TAG with the 'v' prefix
          RELEASE_TAG="v${NEW_VERSION}"

          echo "DRY RUN: Would create a GitHub release with:"
          echo "  - Tag name: $RELEASE_TAG"
          echo "  - Draft: true"
          echo "  - Generate release notes: true"
          echo "  - Prerelease: ${{ contains(inputs.release_version, 'pre') }}"
          echo "  - Repository: ${{ github.repository }}"
          echo "  - Title: Release $RELEASE_TAG"
