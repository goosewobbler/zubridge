name: Build and Test Mode

on:
  workflow_call:
    inputs:
      app:
        description: "Application to build and test"
        required: true
        type: string
      mode:
        description: "Mode to build and test"
        required: true
        type: string
    secrets:
      TURBO_TOKEN:
        required: false
      TURBO_TEAM:
        required: false
      TURBO_API:
        required: false
    outputs:
      success:
        description: "Whether the build succeeded"
        value: ${{ jobs.build.outputs.success }}

env:
  TURBO_TELEMETRY_DISABLED: 1
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_API: ${{ secrets.TURBO_API }}

jobs:
  # Build the specific mode
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.build.outputs.success || 'false' }}
      build_id: ${{ steps.build-info.outputs.build_id }}
      artifact_name: ${{ steps.upload.outputs.artifact_name }}
    steps:
      # Install Linux dependencies for Tauri builds
      - name: Install Linux dependencies
        if: inputs.app == 'tauri' || inputs.app == 'tauri-v1'
        run: |
          sudo tee -a /etc/apt/sources.list > /dev/null <<EOT
          deb http://archive.ubuntu.com/ubuntu jammy main universe
          EOT
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libglib2.0-dev \
            libsoup-2.4-1 \
            libjavascriptcoregtk-4.1-dev

      # Standard checkout
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up Node.js and PNPM
      - name: 🛠️ Setup Development Environment
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: "20"

      # Generate build information for tracking
      - name: 📊 Generate Build Information
        id: build-info
        shell: bash
        run: |
          echo "build_id=$(date +%s)-${{ github.run_id }}-${{ inputs.mode }}" >> $GITHUB_OUTPUT

      # Download shared packages
      - name: 📦 Download shared packages
        uses: actions/download-artifact@v4
        with:
          name: shared-packages
          path: packages

      # Set up Cargo cache for Tauri builds
      - name: 🛠️ Setup Cargo Cache
        if: inputs.app == 'tauri' || inputs.app == 'tauri-v1'
        shell: bash
        run: |
          mkdir -p ~/.cargo/registry
          mkdir -p ~/.cargo/git
          echo '[net]
          git-fetch-with-cli = true
          retry = 3
          [build]
          jobs = 2' > ~/.cargo/config.toml

      # Build the test app
      - name: 🏗️ Build ${{ inputs.app }}:${{ inputs.mode }}
        id: build-app
        run: |
          pnpm run build:${{ inputs.app }}-${{ inputs.mode }}
          echo "success=true" >> $GITHUB_OUTPUT
        shell: bash
        continue-on-error: true

      # Combine build outcomes
      - name: Combine Build Results
        id: build
        run: |
          if [[ "${{ steps.build-app.outputs.success }}" == "true" ]]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      # Upload artifacts
      - name: 📦 Upload Electron Artifacts
        id: upload-electron
        if: steps.build.outputs.success == 'true' && inputs.app == 'electron'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app }}-${{ inputs.mode }}-${{ steps.build-info.outputs.build_id }}
          path: |
            ${{ inputs.mode == 'basic' && 'apps/electron-example/dist-basic' }}
            ${{ inputs.mode == 'handlers' && 'apps/electron-example/dist-handlers' }}
            ${{ inputs.mode == 'reducers' && 'apps/electron-example/dist-reducers' }}
            ${{ inputs.mode == 'redux' && 'apps/electron-example/dist-redux' }}
            ${{ inputs.mode == 'custom' && 'apps/electron-example/dist-custom' }}
          retention-days: 1
          if-no-files-found: error

      - name: 📦 Upload Tauri Artifacts
        id: upload-tauri
        if: steps.build.outputs.success == 'true' && inputs.app == 'tauri'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app }}-${{ inputs.mode }}-${{ steps.build-info.outputs.build_id }}
          path: |
            ${{ inputs.app == 'tauri' && 'apps/tauri-example/dist' }}
            ${{ inputs.app == 'tauri' && 'apps/tauri-example/src-tauri/target' }}
          retention-days: 1
          if-no-files-found: error

      - name: 📦 Upload Tauri v1 Artifacts
        id: upload-tauri-v1
        if: steps.build.outputs.success == 'true' && inputs.app == 'tauri-v1'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app }}-${{ inputs.mode }}-${{ steps.build-info.outputs.build_id }}
          path: |
              ${{ inputs.app == 'tauri-v1' && 'apps/tauri-v1-example/dist' }}
              ${{ inputs.app == 'tauri-v1' && 'apps/tauri-v1-example/src-tauri/target' }}
          retention-days: 1
          if-no-files-found: error

  # Run E2E tests immediately after the build completes
  e2e-test:
    needs: build
    if: needs.build.outputs.success == 'true'
    name: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
      fail-fast: false
    uses: ./.github/workflows/_ci-mode-e2e.reusable.yml
    with:
      os: ${{ matrix.os }}
      app: ${{ inputs.app }}
      mode: ${{ inputs.mode }}
      build_id: ${{ needs.build.outputs.build_id }}
      artifact_name: ${{ needs.build.outputs.artifact_name }}
    secrets:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_API: ${{ secrets.TURBO_API }}
