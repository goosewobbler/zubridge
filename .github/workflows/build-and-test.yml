name: Build and Test Mode

on:
  workflow_call:
    inputs:
      app:
        description: "Application to build and test"
        required: true
        type: string
      mode:
        description: "Mode to build and test"
        required: true
        type: string
    secrets:
      TURBO_TOKEN:
        required: false
      TURBO_TEAM:
        required: false
      TURBO_API:
        required: false
    outputs:
      success:
        description: "Whether any build/test succeeded"
        value: ${{ jobs.ci-status.outputs.success }}

env:
  TURBO_TELEMETRY_DISABLED: 1
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_API: ${{ secrets.TURBO_API }}
  BUILD_ID: ${{ github.run_id }}-${{ github.run_number }}-${{ inputs.mode }}

jobs:
  # Build on Linux
  linux-build:
    name: Linux Build
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.build-result.outputs.success }}
      artifact_name: ${{ inputs.app }}-${{ inputs.mode }}-linux-${{ env.BUILD_ID }}
    steps:
      # Linux-specific dependencies
      - name: Install Linux dependencies
        if: inputs.app == 'tauri' || inputs.app == 'tauri-v1'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev \
            libappindicator3-dev librsvg2-dev patchelf libglib2.0-dev libsoup-2.4-1 libjavascriptcoregtk-4.1-dev

      # Checkout and setup
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Environment
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: "20"

      # Download shared packages
      - name: Download shared packages
        uses: actions/download-artifact@v4
        with:
          name: shared-packages
          path: packages

      # Cargo setup for Tauri
      - name: Setup Cargo Cache
        if: inputs.app == 'tauri' || inputs.app == 'tauri-v1'
        shell: bash
        run: |
          mkdir -p ~/.cargo/{registry,git}
          echo '[net]
          git-fetch-with-cli = true
          retry = 3
          [build]
          jobs = 2' > ~/.cargo/config.toml

      # Build application
      - name: Build ${{ inputs.app }}:${{ inputs.mode }}
        id: build-app
        shell: bash
        run: |
          if [ "${{ inputs.app }}" == "electron" ]; then
            pnpm run build:${{ inputs.app }}-${{ inputs.mode }} -- -l
          else
            pnpm run build:${{ inputs.app }}-${{ inputs.mode }}
          fi
        continue-on-error: true

      # Process build result
      - name: Process Build Result
        id: build-result
        shell: bash
        run: |
          if [[ "${{ steps.build-app.outcome }}" == "success" ]]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "::error::Build failed with outcome: ${{ steps.build-app.outcome }}"
            exit 1
          fi

      # Upload artifacts
      - name: Upload Artifacts
        if: steps.build-result.outputs.success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app }}-${{ inputs.mode }}-linux-${{ env.BUILD_ID }}
          path: ${{ inputs.app == 'electron' && format('apps/{0}-example/dist-{1}', inputs.app, inputs.mode) || format('apps/{0}-example/dist apps/{0}-example/src-tauri/target', inputs.app) }}
          retention-days: 1
          if-no-files-found: error

      # Debug on failure
      - name: Debug on Failure
        uses: stateful/vscode-server-action@v1.1.0
        if: failure()
        with:
          timeout: "180000"

  # Build on macOS
  macos-build:
    name: macOS Build
    runs-on: macOS-latest
    outputs:
      success: ${{ steps.build-result.outputs.success }}
      artifact_name: ${{ inputs.app }}-${{ inputs.mode }}-macos-${{ env.BUILD_ID }}
    steps:
      # Checkout and setup
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Environment
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: "20"

      # Download shared packages
      - name: Download shared packages
        uses: actions/download-artifact@v4
        with:
          name: shared-packages
          path: packages

      # Cargo setup for Tauri
      - name: Setup Cargo Cache
        if: inputs.app == 'tauri' || inputs.app == 'tauri-v1'
        shell: bash
        run: |
          mkdir -p ~/.cargo/{registry,git}
          echo '[net]
          git-fetch-with-cli = true
          retry = 3
          [build]
          jobs = 2' > ~/.cargo/config.toml

      # Build application
      - name: Build ${{ inputs.app }}:${{ inputs.mode }}
        id: build-app
        shell: bash
        run: |
          if [ "${{ inputs.app }}" == "electron" ]; then
            pnpm run build:${{ inputs.app }}-${{ inputs.mode }} -- -m
          else
            pnpm run build:${{ inputs.app }}-${{ inputs.mode }}
          fi
        continue-on-error: true

      # Process build result
      - name: Process Build Result
        id: build-result
        shell: bash
        run: |
          if [[ "${{ steps.build-app.outcome }}" == "success" ]]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "::error::Build failed with outcome: ${{ steps.build-app.outcome }}"
            exit 1
          fi

      # Upload artifacts
      - name: Upload Artifacts
        if: steps.build-result.outputs.success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app }}-${{ inputs.mode }}-macos-${{ env.BUILD_ID }}
          path: ${{ inputs.app == 'electron' && format('apps/{0}-example/dist-{1}', inputs.app, inputs.mode) || format('apps/{0}-example/dist apps/{0}-example/src-tauri/target', inputs.app) }}
          retention-days: 1
          if-no-files-found: error

      # Debug on failure
      - name: Debug on Failure
        uses: stateful/vscode-server-action@v1.1.0
        if: failure()
        with:
          timeout: "180000"

  # Build on Windows
  windows-build:
    name: Windows Build
    runs-on: windows-latest
    outputs:
      success: ${{ steps.build-result.outputs.success }}
      artifact_name: ${{ inputs.app }}-${{ inputs.mode }}-windows-${{ env.BUILD_ID }}
    steps:
      # Checkout and setup
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Environment
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: "20"

      # Download shared packages
      - name: Download shared packages
        uses: actions/download-artifact@v4
        with:
          name: shared-packages
          path: packages

      # Cargo setup for Tauri
      - name: Setup Cargo Cache
        if: inputs.app == 'tauri' || inputs.app == 'tauri-v1'
        shell: bash
        run: |
          mkdir -p ~/.cargo/{registry,git}
          echo '[net]
          git-fetch-with-cli = true
          retry = 3
          [build]
          jobs = 2' > ~/.cargo/config.toml

      # Build application
      - name: Build ${{ inputs.app }}:${{ inputs.mode }}
        id: build-app
        shell: bash
        run: |
          if [ "${{ inputs.app }}" == "electron" ]; then
            pnpm run build:${{ inputs.app }}-${{ inputs.mode }} -- -w
          else
            pnpm run build:${{ inputs.app }}-${{ inputs.mode }}
          fi
        continue-on-error: true

      # Process build result (using PowerShell)
      - name: Process Build Result
        id: build-result
        shell: pwsh
        run: |
          if ("${{ steps.build-app.outcome }}" -eq "success") {
            Write-Output "success=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            Write-Output "success=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            Write-Error "Build failed with outcome: ${{ steps.build-app.outcome }}"
            exit 1
          }

      # Upload artifacts
      - name: Upload Artifacts
        if: steps.build-result.outputs.success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app }}-${{ inputs.mode }}-windows-${{ env.BUILD_ID }}
          path: ${{ inputs.app == 'electron' && format('apps/{0}-example/dist-{1}', inputs.app, inputs.mode) || format('apps/{0}-example/dist apps/{0}-example/src-tauri/target', inputs.app) }}
          retention-days: 1
          if-no-files-found: error

      # Debug on failure
      - name: Debug on Failure
        uses: stateful/vscode-server-action@v1.1.0
        if: failure()
        with:
          timeout: "180000"

  # E2E Tests for Linux
  linux-test:
    needs: linux-build
    if: needs.linux-build.outputs.success == 'true'
    name: Linux Test
    uses: ./.github/workflows/_ci-mode-e2e.reusable.yml
    with:
      os: ubuntu-latest
      app: ${{ inputs.app }}
      mode: ${{ inputs.mode }}
      build_id: ${{ github.run_id }}-${{ github.run_number }}-${{ inputs.mode }}
      artifact_name: ${{ needs.linux-build.outputs.artifact_name }}
      test_name: "Linux"
    secrets:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_API: ${{ secrets.TURBO_API }}

  # E2E Tests for macOS
  macos-test:
    needs: macos-build
    if: needs.macos-build.outputs.success == 'true'
    name: macOS Test
    uses: ./.github/workflows/_ci-mode-e2e.reusable.yml
    with:
      os: macOS-latest
      app: ${{ inputs.app }}
      mode: ${{ inputs.mode }}
      build_id: ${{ github.run_id }}-${{ github.run_number }}-${{ inputs.mode }}
      artifact_name: ${{ needs.macos-build.outputs.artifact_name }}
      test_name: "macOS"
    secrets:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_API: ${{ secrets.TURBO_API }}

  # E2E Tests for Windows
  windows-test:
    needs: windows-build
    if: needs.windows-build.outputs.success == 'true'
    name: Windows Test
    uses: ./.github/workflows/_ci-mode-e2e.reusable.yml
    with:
      os: windows-latest
      app: ${{ inputs.app }}
      mode: ${{ inputs.mode }}
      build_id: ${{ github.run_id }}-${{ github.run_number }}-${{ inputs.mode }}
      artifact_name: ${{ needs.windows-build.outputs.artifact_name }}
      test_name: "Windows"
    secrets:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_API: ${{ secrets.TURBO_API }}

  # Final status aggregation
  ci-status:
    name: Status
    needs: [linux-build, macos-build, windows-build, linux-test, macos-test, windows-test]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.check-status.outputs.success }}
    steps:
      - name: Check status
        id: check-status
        run: |
          if [[ "${{ contains(needs.*.result, 'success') }}" == "true" ]]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "At least one job passed successfully"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "All jobs failed"
            exit 1
          fi
