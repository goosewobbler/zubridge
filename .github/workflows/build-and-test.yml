name: Build and Test Mode

on:
  workflow_call:
    inputs:
      app:
        description: "Application to build and test"
        required: true
        type: string
      mode:
        description: "Mode to build and test"
        required: true
        type: string
    secrets:
      TURBO_TOKEN:
        required: false
      TURBO_TEAM:
        required: false
      TURBO_API:
        required: false
    outputs:
      success:
        description: "Whether the build succeeded"
        value: ${{ jobs.build.outputs.success }}

env:
  TURBO_TELEMETRY_DISABLED: 1
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_API: ${{ secrets.TURBO_API }}

jobs:
  # Build the specific mode on platform-specific runners
  build:
    name: Build (${{ matrix.os }})
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    outputs:
      success: ${{ steps.build-result.outputs.success || 'false' }}
      build_id: ${{ steps.build-info.outputs.build_id }}
      linux_artifact: ${{ inputs.app }}-${{ inputs.mode }}-linux-${{ steps.build-info.outputs.build_id }}
      macos_artifact: ${{ inputs.app }}-${{ inputs.mode }}-macos-${{ steps.build-info.outputs.build_id }}
      windows_artifact: ${{ inputs.app }}-${{ inputs.mode }}-windows-${{ steps.build-info.outputs.build_id }}
    steps:
      # Install Linux dependencies for Tauri builds
      - name: Install Linux dependencies
        if: inputs.app == 'tauri' || inputs.app == 'tauri-v1' && runner.os == 'Linux'
        run: |
          sudo tee -a /etc/apt/sources.list > /dev/null <<EOT
          deb http://archive.ubuntu.com/ubuntu jammy main universe
          EOT
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libglib2.0-dev \
            libsoup-2.4-1 \
            libjavascriptcoregtk-4.1-dev

      # Install Wine for Windows builds (only for Electron app on Linux runner)
      - name: Install Wine for Windows Electron builds
        if: inputs.app == 'electron' && runner.os == 'Linux'
        run: |
          echo "Setting up Wine for Electron Windows build..."
          sudo dpkg --add-architecture i386

          # Dynamically get Ubuntu codename
          UBUNTU_CODENAME=$(lsb_release -cs)
          echo "Detected Ubuntu codename: $UBUNTU_CODENAME"

          sudo mkdir -pm755 /etc/apt/keyrings
          wget -O - https://dl.winehq.org/wine-builds/winehq.key | sudo gpg --dearmor -o /etc/apt/keyrings/winehq-archive.key

          # Use the dynamic codename in the sources list URL
          sudo wget -NP /etc/apt/sources.list.d/ "https://dl.winehq.org/wine-builds/ubuntu/dists/$UBUNTU_CODENAME/winehq-$UBUNTU_CODENAME.sources"

          sudo apt-get update -qq # -qq for quieter output
          sudo apt-get install -y --no-install-recommends winehq-stable # Or winehq-devel / winehq-staging
          echo "Wine setup complete."
          wine --version # Verify installation

      # Standard checkout
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up Node.js and PNPM
      - name: üõ†Ô∏è Setup Development Environment
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: "20"

      # Generate build information for tracking
      - name: üìä Generate Build Information
        id: build-info
        shell: bash
        run: |
          echo "build_id=$(date +%s)-${{ github.run_id }}-${{ inputs.mode }}" >> $GITHUB_OUTPUT

      # Download shared packages
      - name: üì¶ Download shared packages
        uses: actions/download-artifact@v4
        with:
          name: shared-packages
          path: packages

      # Set up Cargo cache for Tauri builds
      - name: üõ†Ô∏è Setup Cargo Cache
        if: (inputs.app == 'tauri' || inputs.app == 'tauri-v1')
        shell: bash
        run: |
          mkdir -p ~/.cargo/registry
          mkdir -p ~/.cargo/git
          echo '[net]
          git-fetch-with-cli = true
          retry = 3
          [build]
          jobs = 2' > ~/.cargo/config.toml

      # Determine platform-specific builder flags
      - name: Set platform-specific build flags
        id: build-flags
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "electron_builder_flag=-l" >> $GITHUB_OUTPUT
            echo "platform=linux" >> $GITHUB_OUTPUT
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "electron_builder_flag=-m" >> $GITHUB_OUTPUT
            echo "platform=macos" >> $GITHUB_OUTPUT
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "electron_builder_flag=-w" >> $GITHUB_OUTPUT
            echo "platform=windows" >> $GITHUB_OUTPUT
          fi

      # Build the test app with platform-specific flags
      - name: üèóÔ∏è Build ${{ inputs.app }}:${{ inputs.mode }} for ${{ runner.os }}
        id: build-app
        shell: bash
        run: |
          if [ "${{ inputs.app }}" == "electron" ]; then
            # For Electron, pass the platform-specific flag to the existing build script
            pnpm run build:${{ inputs.app }}-${{ inputs.mode }} -- ${{ steps.build-flags.outputs.electron_builder_flag }}
          else
            # For Tauri, use the existing build command
            pnpm run build:${{ inputs.app }}-${{ inputs.mode }}
          fi
        continue-on-error: true

      # Combine build outcomes
      - name: Combine Build Results
        id: build-result
        run: |
          echo "Build app step outcome: ${{ steps.build-app.outcome }}"
          if [[ "${{ steps.build-app.outcome }}" == "success" ]]; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "::error::Application build failed. Outcome: ${{ steps.build-app.outcome }}"
            exit 1
          fi

      # Upload artifacts with platform-specific names
      - name: üì¶ Upload Electron Artifacts for ${{ runner.os }}
        id: upload-electron
        if: steps.build-result.outputs.success == 'true' && inputs.app == 'electron'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app }}-${{ inputs.mode }}-${{ steps.build-flags.outputs.platform }}-${{ steps.build-info.outputs.build_id }}
          path: apps/electron-example/dist-${{ inputs.mode }}
          retention-days: 1
          if-no-files-found: error

      - name: üì¶ Upload Tauri Artifacts for ${{ runner.os }}
        id: upload-tauri
        if: steps.build-result.outputs.success == 'true' && (inputs.app == 'tauri' || inputs.app == 'tauri-v1')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app }}-${{ inputs.mode }}-${{ steps.build-flags.outputs.platform }}-${{ steps.build-info.outputs.build_id }}
          path: |
            apps/${{ inputs.app }}-example/dist
            apps/${{ inputs.app }}-example/src-tauri/target
          retention-days: 1
          if-no-files-found: error

      # Provide an interactive debugging session on failure
      - name: üêõ Debug on Failure
        uses: stateful/vscode-server-action@v1.1.0
        if: failure()
        with:
            timeout: "180000"

  # Run E2E tests on each platform using the platform-specific builds
  e2e-test:
    needs: build
    if: needs.build.outputs.success == 'true'
    name: E2E (${{ matrix.os }})
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
      fail-fast: false
    uses: ./.github/workflows/_ci-mode-e2e.reusable.yml
    with:
      os: ${{ matrix.os }}
      app: ${{ inputs.app }}
      mode: ${{ inputs.mode }}
      build_id: ${{ needs.build.outputs.build_id }}
      artifact_name: ${{ matrix.os == 'ubuntu-latest' && needs.build.outputs.linux_artifact || matrix.os == 'macOS-latest' && needs.build.outputs.macos_artifact || needs.build.outputs.windows_artifact }}
    secrets:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_API: ${{ secrets.TURBO_API }}
