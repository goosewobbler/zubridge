name: Build and Test Mode

on:
  workflow_call:
    inputs:
      app:
        description: "Application to build and test"
        required: true
        type: string
      mode:
        description: "Mode to build and test"
        required: true
        type: string
    secrets:
      TURBO_TOKEN:
        required: false
      TURBO_TEAM:
        required: false
      TURBO_API:
        required: false
    outputs:
      success:
        description: "Whether any build/test succeeded"
        value: ${{ jobs.ci-status.outputs.success }}

env:
  TURBO_TELEMETRY_DISABLED: 1
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_API: ${{ secrets.TURBO_API }}
  BUILD_ID: ${{ github.run_id }}-${{ github.run_number }}-${{ inputs.mode }}

jobs:
  # Build on Linux
  linux-build:
    name: Linux Build
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.build-result.outputs.success }}
      artifact_name: ${{ inputs.app }}-${{ inputs.mode }}-linux-${{ env.BUILD_ID }}
    steps:
      # Linux-specific dependencies
      - name: Install Linux dependencies
        if: inputs.app == 'tauri' || inputs.app == 'tauri-v1'
        run: |
          sudo tee -a /etc/apt/sources.list > /dev/null <<EOT
          deb http://archive.ubuntu.com/ubuntu jammy main universe
          EOT
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libglib2.0-dev \
            libsoup-2.4-1 \
            libsoup2.4-dev \
            libjavascriptcoregtk-4.0-dev \
            libjavascriptcoregtk-4.1-dev

      # Checkout and setup
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Environment
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: "20"

      # Download shared packages
      - name: Download shared packages
        uses: actions/download-artifact@v4
        with:
          name: shared-packages
          path: packages

      # Cargo setup for Tauri
      - name: Setup Cargo Cache
        if: inputs.app == 'tauri' || inputs.app == 'tauri-v1'
        shell: bash
        run: |
          mkdir -p ~/.cargo/{registry,git}
          echo '[net]
          git-fetch-with-cli = true
          retry = 3
          [build]
          jobs = 2' > ~/.cargo/config.toml

      # Build application
      - name: Build ${{ inputs.app }}:${{ inputs.mode }}
        id: build-app
        shell: bash
        run: |
          APP_NAME_FULL="zubridge-${{ inputs.app }}-example"
          if [ "${{ inputs.app }}" == "electron" ]; then
            pnpm run build:${{ inputs.app }}-${{ inputs.mode }} -- -l
          else
            # Run Vite build first
            echo "--- Running Vite build for ${{ inputs.app }}-${{ inputs.mode }} ---"
            cross-env ZUBRIDGE_MODE=${{ inputs.mode }} pnpm --filter=$APP_NAME_FULL exec vite build

            # Determine config file and property name
            CONFIG_FILE_PATH="apps/$APP_NAME_FULL/src-tauri/tauri.conf.json"
            DIST_PROPERTY_NAME="distDir" # Default for v1
            if [ "${{ inputs.app }}" == "tauri" ]; then # Tauri v2 uses frontendDist
              DIST_PROPERTY_NAME="frontendDist"
            fi

            # Calculate absolute path for dist dir
            # GITHUB_WORKSPACE is the root of the checkout
            ABSOLUTE_DIST_PATH="$GITHUB_WORKSPACE/apps/$APP_NAME_FULL/dist"

            echo "--- Modifying $CONFIG_FILE_PATH to use absolute dist path: $ABSOLUTE_DIST_PATH for property $DIST_PROPERTY_NAME ---"
            # Use Node to modify the JSON config file to set the dist property to an absolute path
            # This is more robust than sed/awk for JSON manipulation
            node -e "\
              const fs = require('fs');\
              const path = require('path');\
              const configFile = path.resolve('$CONFIG_FILE_PATH');\
              const config = JSON.parse(fs.readFileSync(configFile, 'utf8'));\
              config.build.$DIST_PROPERTY_NAME = '$ABSOLUTE_DIST_PATH';\
              fs.writeFileSync(configFile, JSON.stringify(config, null, 2));\
              console.log('Successfully updated $DIST_PROPERTY_NAME in', configFile);"

            # For debugging: print the modified config
            echo "--- Contents of $CONFIG_FILE_PATH after modification ---"
            cat $CONFIG_FILE_PATH
            echo "--- End of modified config ---"

            # Now run Tauri build
            echo "--- Running Tauri build for ${{ inputs.app }}-${{ inputs.mode }} ---"
            cross-env ZUBRIDGE_MODE=${{ inputs.mode }} pnpm --filter=$APP_NAME_FULL exec pnpm tauri build
          fi
        continue-on-error: true

      # Process build result for Linux
      - name: Process Build Result
        id: build-result
        uses: ./.github/workflows/actions/process-build-result
        with:
          build_step_id: build-app
          build_outcome: ${{ steps.build-app.outcome }}
          shell_type: bash

      # Upload artifacts
      - name: Upload Artifacts
        if: steps.build-result.outputs.success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app }}-${{ inputs.mode }}-linux-${{ env.BUILD_ID }}
          path: ${{ inputs.app == 'electron' && format('apps/{0}-example/dist-{1}', inputs.app, inputs.mode) || format('apps/{0}-example/src-tauri', inputs.app) }}
          retention-days: 1
          if-no-files-found: warn

      # Debug on failure
      - name: Debug on Failure
        uses: stateful/vscode-server-action@v1.1.0
        if: failure()
        with:
          timeout: "180000"

  # Build on macOS
  macos-build:
    name: macOS Build
    runs-on: macOS-latest
    outputs:
      success: ${{ steps.build-result.outputs.success }}
      artifact_name: ${{ inputs.app }}-${{ inputs.mode }}-macos-${{ env.BUILD_ID }}
    steps:
      # Checkout and setup
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Environment
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: "20"

      # Download shared packages
      - name: Download shared packages
        uses: actions/download-artifact@v4
        with:
          name: shared-packages
          path: packages

      # Cargo setup for Tauri
      - name: Setup Cargo Cache
        if: inputs.app == 'tauri' || inputs.app == 'tauri-v1'
        shell: bash
        run: |
          mkdir -p ~/.cargo/{registry,git}
          echo '[net]
          git-fetch-with-cli = true
          retry = 3
          [build]
          jobs = 2' > ~/.cargo/config.toml

      # Build application
      - name: Build ${{ inputs.app }}:${{ inputs.mode }}
        id: build-app
        shell: bash
        run: |
          APP_NAME_FULL="zubridge-${{ inputs.app }}-example"
          if [ "${{ inputs.app }}" == "electron" ]; then
            pnpm run build:${{ inputs.app }}-${{ inputs.mode }} -- -m
          else
            # Run Vite build first
            echo "--- Running Vite build for ${{ inputs.app }}-${{ inputs.mode }} ---"
            cross-env ZUBRIDGE_MODE=${{ inputs.mode }} pnpm --filter=$APP_NAME_FULL exec vite build

            # Determine config file and property name
            CONFIG_FILE_PATH="apps/$APP_NAME_FULL/src-tauri/tauri.conf.json"
            DIST_PROPERTY_NAME="distDir" # Default for v1
            if [ "${{ inputs.app }}" == "tauri" ]; then # Tauri v2 uses frontendDist
              DIST_PROPERTY_NAME="frontendDist"
            fi

            # Calculate absolute path for dist dir
            ABSOLUTE_DIST_PATH="$GITHUB_WORKSPACE/apps/$APP_NAME_FULL/dist"

            echo "--- Modifying $CONFIG_FILE_PATH to use absolute dist path: $ABSOLUTE_DIST_PATH for property $DIST_PROPERTY_NAME ---"
            node -e "\
              const fs = require('fs');\
              const path = require('path');\
              const configFile = path.resolve('$CONFIG_FILE_PATH');\
              const config = JSON.parse(fs.readFileSync(configFile, 'utf8'));\
              config.build.$DIST_PROPERTY_NAME = '$ABSOLUTE_DIST_PATH';\
              fs.writeFileSync(configFile, JSON.stringify(config, null, 2));\
              console.log('Successfully updated $DIST_PROPERTY_NAME in', configFile);"

            echo "--- Contents of $CONFIG_FILE_PATH after modification ---"
            cat $CONFIG_FILE_PATH
            echo "--- End of modified config ---"

            # Now run Tauri build
            echo "--- Running Tauri build for ${{ inputs.app }}-${{ inputs.mode }} ---"
            cross-env ZUBRIDGE_MODE=${{ inputs.mode }} pnpm --filter=$APP_NAME_FULL exec pnpm tauri build
          fi
        continue-on-error: true

      # Process build result for macOS
      - name: Process Build Result
        id: build-result
        uses: ./.github/workflows/actions/process-build-result
        with:
          build_step_id: build-app
          build_outcome: ${{ steps.build-app.outcome }}
          shell_type: bash

      # Upload artifacts
      - name: Upload Artifacts
        if: steps.build-result.outputs.success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app }}-${{ inputs.mode }}-macos-${{ env.BUILD_ID }}
          path: ${{ inputs.app == 'electron' && format('apps/{0}-example/dist-{1}', inputs.app, inputs.mode) || format('apps/{0}-example/src-tauri', inputs.app) }}
          retention-days: 1
          if-no-files-found: warn

      # Debug on failure
      - name: Debug on Failure
        uses: stateful/vscode-server-action@v1.1.0
        if: failure()
        with:
          timeout: "180000"

  # Build on Windows
  windows-build:
    name: Windows Build
    runs-on: windows-latest
    outputs:
      success: ${{ steps.build-result.outputs.success }}
      artifact_name: ${{ inputs.app }}-${{ inputs.mode }}-windows-${{ env.BUILD_ID }}
    steps:
      # Checkout and setup
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Environment
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: "20"

      # Download shared packages
      - name: Download shared packages
        uses: actions/download-artifact@v4
        with:
          name: shared-packages
          path: packages

      # Cargo setup for Tauri
      - name: Setup Cargo Cache
        if: inputs.app == 'tauri' || inputs.app == 'tauri-v1'
        shell: bash
        run: |
          mkdir -p ~/.cargo/{registry,git}
          echo '[net]
          git-fetch-with-cli = true
          retry = 3
          [build]
          jobs = 2' > ~/.cargo/config.toml

      # Build application
      - name: Build ${{ inputs.app }}:${{ inputs.mode }}
        id: build-app
        shell: bash
        run: |
          APP_NAME_FULL="zubridge-${{ inputs.app }}-example"
          if [ "${{ inputs.app }}" == "electron" ]; then
            pnpm run build:${{ inputs.app }}-${{ inputs.mode }} -- -w
          else
            # Run Vite build first
            echo "--- Running Vite build for ${{ inputs.app }}-${{ inputs.mode }} ---"
            cross-env ZUBRIDGE_MODE=${{ inputs.mode }} pnpm --filter=$APP_NAME_FULL exec vite build

            # Determine config file and property name
            CONFIG_FILE_PATH="apps/$APP_NAME_FULL/src-tauri/tauri.conf.json"
            DIST_PROPERTY_NAME="distDir" # Default for v1
            if [ "${{ inputs.app }}" == "tauri" ]; then # Tauri v2 uses frontendDist
              DIST_PROPERTY_NAME="frontendDist"
            fi

            # Calculate absolute path for dist dir
            ABSOLUTE_DIST_PATH="$GITHUB_WORKSPACE/apps/$APP_NAME_FULL/dist"

            echo "--- Modifying $CONFIG_FILE_PATH to use absolute dist path: $ABSOLUTE_DIST_PATH for property $DIST_PROPERTY_NAME ---"
            node -e "\
              const fs = require('fs');\
              const path = require('path');\
              const configFile = path.resolve('$CONFIG_FILE_PATH');\
              const config = JSON.parse(fs.readFileSync(configFile, 'utf8'));\
              config.build.$DIST_PROPERTY_NAME = '$ABSOLUTE_DIST_PATH';\
              fs.writeFileSync(configFile, JSON.stringify(config, null, 2));\
              console.log('Successfully updated $DIST_PROPERTY_NAME in', configFile);"

            echo "--- Contents of $CONFIG_FILE_PATH after modification ---"
            cat $CONFIG_FILE_PATH
            echo "--- End of modified config ---"

            # Now run Tauri build
            echo "--- Running Tauri build for ${{ inputs.app }}-${{ inputs.mode }} ---"
            cross-env ZUBRIDGE_MODE=${{ inputs.mode }} pnpm --filter=$APP_NAME_FULL exec pnpm tauri build
          fi
        continue-on-error: true

      # Process build result for Windows
      - name: Process Build Result
        id: build-result
        uses: ./.github/workflows/actions/process-build-result
        with:
          build_step_id: build-app
          build_outcome: ${{ steps.build-app.outcome }}
          shell_type: pwsh

      # Upload artifacts
      - name: Upload Artifacts
        if: steps.build-result.outputs.success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app }}-${{ inputs.mode }}-windows-${{ env.BUILD_ID }}
          path: ${{ inputs.app == 'electron' && format('apps/{0}-example/dist-{1}', inputs.app, inputs.mode) || format('apps/{0}-example/src-tauri', inputs.app) }}
          retention-days: 1
          if-no-files-found: warn

      # Debug on failure
      - name: Debug on Failure
        uses: stateful/vscode-server-action@v1.1.0
        if: failure()
        with:
          timeout: "180000"

  # E2E Tests for Linux
  linux-test:
    needs: linux-build
    if: needs.linux-build.outputs.success == 'true'
    name: Linux E2E
    runs-on: ubuntu-latest
    env:
      TURBO_TELEMETRY_DISABLED: 1
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_API: ${{ secrets.TURBO_API }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Environment
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: "20"

      - name: Setup E2E Environment
        uses: ./.github/workflows/actions/setup-e2e-environment
        with:
          os: ubuntu-latest
          app: ${{ inputs.app }}
          mode: ${{ inputs.mode }}
          artifact_name: ${{ needs.linux-build.outputs.artifact_name }}

      - name: Execute E2E Tests
        run: pnpm run test:e2e:${{ inputs.app }}-${{ inputs.mode }} --concurrency=1
        shell: bash

      - name: Handle Test Failures
        if: failure()
        uses: ./.github/workflows/actions/handle-e2e-failures
        with:
          os: ubuntu-latest
          app: ${{ inputs.app }}
          mode: ${{ inputs.mode }}

  # E2E Tests for macOS
  macos-test:
    needs: macos-build
    if: needs.macos-build.outputs.success == 'true'
    name: macOS E2E
    runs-on: macOS-latest
    env:
      TURBO_TELEMETRY_DISABLED: 1
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_API: ${{ secrets.TURBO_API }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Environment
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: "20"

      - name: Setup E2E Environment
        uses: ./.github/workflows/actions/setup-e2e-environment
        with:
          os: macOS-latest
          app: ${{ inputs.app }}
          mode: ${{ inputs.mode }}
          artifact_name: ${{ needs.macos-build.outputs.artifact_name }}

      - name: Execute E2E Tests
        run: pnpm run test:e2e:${{ inputs.app }}-${{ inputs.mode }} --concurrency=1
        shell: bash

      - name: Handle Test Failures
        if: failure()
        uses: ./.github/workflows/actions/handle-e2e-failures
        with:
          os: macOS-latest
          app: ${{ inputs.app }}
          mode: ${{ inputs.mode }}

  # E2E Tests for Windows
  windows-test:
    needs: windows-build
    if: needs.windows-build.outputs.success == 'true'
    name: Windows E2E
    runs-on: windows-latest
    env:
      TURBO_TELEMETRY_DISABLED: 1
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      TURBO_API: ${{ secrets.TURBO_API }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Environment
        uses: ./.github/workflows/actions/setup-workspace
        with:
          node-version: "20"

      - name: Setup E2E Environment
        uses: ./.github/workflows/actions/setup-e2e-environment
        with:
          os: windows-latest
          app: ${{ inputs.app }}
          mode: ${{ inputs.mode }}
          artifact_name: ${{ needs.windows-build.outputs.artifact_name }}

      - name: Execute E2E Tests
        run: pnpm run test:e2e:${{ inputs.app }}-${{ inputs.mode }} --concurrency=1
        shell: bash

      - name: Handle Test Failures
        if: failure()
        uses: ./.github/workflows/actions/handle-e2e-failures
        with:
          os: windows-latest
          app: ${{ inputs.app }}
          mode: ${{ inputs.mode }}

  # Final status aggregation
  ci-status:
    name: Status
    needs: [linux-build, macos-build, windows-build, linux-test, macos-test, windows-test]
    if: always()
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.check-status.outputs.success }}
    steps:
      - name: Check status
        id: check-status
        run: |
          if [[ "${{ contains(needs.*.result, 'success') }}" == "true" ]]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "At least one job passed successfully"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "All jobs failed"
            exit 1
          fi
